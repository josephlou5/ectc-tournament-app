{% extends "shared/layout.jinja" %}

{% block title %}
Notifications
{% endblock %}

{% set fetch_roster_btn_id = "fetch-roster-btn" %}
{% set fetch_roster_dummy_input_id = "fetch-roster-dummy-input" %}
{% set fetch_roster_messages_id = "fetch-roster-messages" %}
{% set clear_roster_btn_id = "clear-roster-btn" %}

{% set match_numbers_input_id = "match-numbers-input" %}
{% set fetch_matches_btn_id = "fetch-matches-btn" %}
{% set set_last_matches_query_btn_id = "set-last-matches-query-btn" %}
{% set matches_info_id = "matches-info" %}

{% set send_notif_btn_id = "send-notification-btn" %}

{% set flashed = get_flashed_by_categories(subcategories=true) %}

{% block body %}
<div id="notifications-body" class="container-fluid">
  <h2>Notifications</h2>
  <div id="teams-roster-section" class="row mb-2">
    <div class="col">
      <h4>Teams Roster</h4>
      <div class="mb-2">
        The roster in the TMS spreadsheet will be fetched whenever the "Fetch
        Roster" button is pressed. There should be a worksheet called
        <code>{{ roster_worksheet_name }}</code> with the full teams roster.
        (Note: the header columns are case insensitive and must be unique.)
        {# TODO: add a help page with the full requirements of the worksheet #}
      </div>
      {% if roster_last_fetched_time is not none %}
      {# assume there is a roster #}
      <div class="mb-2">
        You can view the full roster here:
        <a href="{{ url_for('view_full_roster') }}">Full Roster</a>
      </div>
      {% endif %}
      <div class="mb-2">
        <div class="row">
          <div class="col-auto">
            {{ macros.loading_btn(
                 fetch_roster_btn_id, "success", "Fetch Roster", "Fetching..."
               )
            }}
          </div>
          {% if roster_last_fetched_time is not none %}
          {# alerts have weird spacings, so need to also have "mt-2". add "mb-2"
             for additional spacing when this div wraps.
           #}
          <div class="col-auto my-2">
            {% call macros.bs_alert_sm("warning", dismissible=false) %}
            <strong>Warning:</strong> Fetching again will override the current
            roster.
            {% endcall %}
          </div>
          {% endif %}
        </div>
        <div class="row mb-2">
          <div class="col">
            <input type="hidden" id="{{ fetch_roster_dummy_input_id }}" />
            <div
              id="{{ fetch_roster_dummy_input_id }}-invalid"
              class="invalid-feedback"
            ></div>
          </div>
        </div>
        <div class="row">
          <div id="{{ fetch_roster_messages_id }}" class="col-auto">
            {% for accent, messages in flashed["fetch-roster"].items() %}
            {% for message in messages %}
            {% call macros.bs_alert(accent) %}
            {{ message }}
            {% endcall %}
            {% endfor %}
            {% endfor %}
          </div>
        </div>
        {% if roster_last_fetched_time is not none %}
        <div class="row mb-2">
          <div class="col-auto">
            {{ macros.confirm_btn(
                 clear_roster_btn_id,
                 "Clear Roster",
                 "clear the full roster",
                 loading_text="Clearing...",
               )
            }}
          </div>
        </div>
        {% endif %}
        <div class="row mb-2">
          <div class="col">
            Last fetched:
            {% if roster_last_fetched_time is none %}
            <em class="text-muted">never</em>
            {% else %}
            {{ roster_last_fetched_time }}
            {% if has_fetch_logs %}
            <a href="{{ url_for('fetch_roster_logs') }}">(logs)</a>
            {% endif %}
            {% endif %}
          </div>
        </div>
      </div>
    </div>
  </div>
  <div id="send-notifications-section" class="row mb-2">
    <div class="col">
      <div class="row mb-2">
        <div class="col">
          <h4>Send Match Notifications</h4>
          <div>
            Enter the match numbers below that you want to send notifications
            for. The TMS spreadsheet should have a worksheet called
            <code>{{ matches_worksheet_name }}</code> which will be queried to
            find the competing teams for each match.
          </div>
        </div>
      </div>
      <div class="row mb-2">
        {# want the switch back to auto somewhere between xs and sm, but not
           possible without customizing the breakpoints
         #}
        <div class="col-xs-auto col-md col-xl-auto">
          <div class="row">
            <label
              for="{{ match_numbers_input_id }}"
              class="col-auto col-form-label pe-0"
            >
              Matches
            </label>
            <div class="col pe-0">
              <input
                type="text"
                id="{{ match_numbers_input_id }}"
                class="form-control"
                placeholder="e.g., 101-104"
              />
              <div
                id="{{ match_numbers_input_id }}-invalid"
                class="invalid-feedback"
              ></div>
              <div class="form-text">
                The match numbers should be separated by spaces or commas. You
                may use dashes for match number ranges.
              </div>
            </div>
          </div>
        </div>
        <div class="col-auto pe-0">
          {{ macros.loading_btn(
               fetch_matches_btn_id,
               "success",
               "Fetch Matches Info",
               "Fetching...",
             )
          }}
        </div>
        <div class="col-auto">
          <button
            type="button"
            id="{{ set_last_matches_query_btn_id }}"
            {% with hidden = "d-none" if last_matches_query is none else "" %}
            class="btn btn btn-secondary {{ hidden }}"
            {% endwith %}
            lastquery="{{ last_matches_query or '' }}"
          >
            Last Query
          </button>
        </div>
      </div>
      <div class="row mb-2">
        <div class="col">
          <h4>Matches Info</h4>
          <div id="{{ matches_info_id }}">
            {# filled out by AJAX calls #}
          </div>
        </div>
      </div>
      <div class="row">
        <div class="col">
          {# button currently does nothing #}
          {{ macros.loading_btn(
               send_notif_btn_id, "primary", "Send Notification", "Sending..."
             )
          }}
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block script %}
<script>
  function handleFetchRosterClicked() {
    if (isButtonLoading('{{ fetch_roster_btn_id }}')) {
      // currently fetching; ignore click
      return;
    }

    // clear messages
    $('#{{ fetch_roster_messages_id }}').html('');
    clearInvalid('{{ fetch_roster_dummy_input_id }}');

    setButtonLoading('{{ fetch_roster_btn_id }}');
    ajaxRequest('POST', '{{ url_for("fetch_roster") }}', {
      success: (response, status, jqXHR) => {
        if (response.success) {
          // reload the page
          location.reload();
        } else {
          // some failure
          stopButtonLoading('{{ fetch_roster_btn_id }}');
          setInvalid(
            '{{ fetch_roster_dummy_input_id }}',
            response.reason ?? 'Unknown error: please try again'
          );
        }
      },
      error: (jqXHR, status, errorThrown) => {
        stopButtonLoading('{{ fetch_roster_btn_id }}');
        setInvalid('{{ fetch_roster_dummy_input_id }}', jqXHR.statusText);
      },
    });
  }

  function handleClearRosterClicked() {
    if (isButtonLoading('{{ clear_roster_btn_id }}')) {
      // currently clearing; ignore click
      return;
    }

    setButtonLoading('{{ clear_roster_btn_id }}');
    // just reload once the clearing is done
    ajaxRequest('DELETE', '{{ url_for("fetch_roster") }}');
  }

  function handleFetchMatchInfoClicked() {
    if (isButtonLoading('{{ fetch_matches_btn_id }}')) {
      // currently fetching; ignore the click
      return;
    }

    clearInvalid('{{ match_numbers_input_id }}');

    const matchesQuery = getInputValue('{{ match_numbers_input_id }}');
    if (matchesQuery === '') {
      // Error: no match numbers given
      setInvalid(
        '{{ match_numbers_input_id }}',
        'Please enter a match number.'
      );
      return;
    }

    setButtonLoading('{{ fetch_matches_btn_id }}');
    ajaxRequest('GET', '{{ url_for("fetch_matches_info") }}', {
      data: { matches: matchesQuery },
      success: (response, status, jqXHR) => {
        stopButtonLoading('{{ fetch_matches_btn_id }}');
        if (response.success) {
          // clear the input
          $('#{{ match_numbers_input_id }}').val('');
          // allow the user to use the last query button
          const $setLastQueryButton = $('#{{ set_last_matches_query_btn_id }}');
          $setLastQueryButton.removeClass('d-none');
          $setLastQueryButton.attr('lastquery', response['last_matches_query']);
          // populate the matches data
          $('#{{ matches_info_id }}').html(response['matches_html']);
        } else {
          // some failure
          setInvalid(
            '{{ match_numbers_input_id }}',
            response.reason ?? 'Unknown error: please try again'
          );
        }
      },
      error: (jqXHR, status, errorThrown) => {
        stopButtonLoading('{{ fetch_matches_btn_id }}');
        setInvalid('{{ match_numbers_input_id }}', jqXHR.statusText);
      },
    });
  }

  function handleSetLastMatchesQueryClicked() {
    const lastMatchesQuery = getAttr(
      '{{ set_last_matches_query_btn_id }}',
      'lastquery'
    );
    if (lastMatchesQuery === '') {
      return;
    }
    // set match numbers input value
    $('#{{ match_numbers_input_id }}').val(lastMatchesQuery);
  }

  function clearMatchesInfo() {
    $('#{{ matches_info_id }}').html('No matches');
  }

  function refreshMatches(matchesQuery) {
    const refreshBtnId = 'refresh-matches-btn';
    const refreshStatusId = '#refresh-matches-status';

    if (isButtonLoading(refreshBtnId)) {
      // currently refreshing; ignore click
      return;
    }

    // clear the input
    $('#{{ match_numbers_input_id }}').val('');
    clearInvalid('{{ match_numbers_input_id }}');

    if (matchesQuery === '') {
      // do nothing
      return;
    }

    setButtonLoading(refreshBtnId);
    ajaxRequest('GET', '{{ url_for("fetch_matches_info") }}', {
      data: { matches: matchesQuery },
      success: (response, status, jqXHR) => {
        stopButtonLoading(refreshBtnId);
        if (response.success) {
          // repopulate the matches data (replaces the button and status)
          $('#{{ matches_info_id }}').html(response['matches_html']);
        } else {
          // some failure
          $(refreshStatusId).html(
            response.reason ?? 'Unknown error: please try again'
          );
        }
      },
      error: (jqXHR, status, errorThrown) => {
        stopButtonLoading(refreshBtnId);
        $(refreshStatusId).html(jqXHR.statusText);
      },
    });
  }

  function toggleMatchTeamMembers(elementId) {
    const $membersDiv = $('#' + elementId);
    const $toggleButton = $('#toggle-' + elementId);
    if ($membersDiv.hasClass('d-none')) {
      // show
      $membersDiv.removeClass('d-none');
      $toggleButton.html('Hide Members');
    } else {
      // hide
      $membersDiv.addClass('d-none');
      $toggleButton.html('Show Members');
    }
  }

  function removeMatchRow(matchNumber) {
    const $row = $('#match-' + matchNumber);
    if ($row.length === 0) return;
    $row.remove();
    if ($('.match-row').length === 0) {
      // no more matches
      clearMatchesInfo();
    }
  }

  $(document).ready(() => {
    // Fetch roster
    $('#{{ fetch_roster_btn_id }}').click((event) => {
      handleFetchRosterClicked();
    });
    $('#{{ clear_roster_btn_id }}').click((event) => {
      handleClearRosterClicked();
    });
    // clear the flashed text after 60 seconds
    clearElementAfter('{{ fetch_roster_messages_id }}', 60);

    // Fetch match info
    $('#{{ match_numbers_input_id }}').onEnterKeyPress((event) => {
      $('#{{ fetch_matches_btn_id }}').click();
    });
    $('#{{ fetch_matches_btn_id }}').click((event) => {
      handleFetchMatchInfoClicked();
    });
    $('#{{ set_last_matches_query_btn_id }}').click((event) => {
      handleSetLastMatchesQueryClicked();
    });
    clearMatchesInfo();
  });
</script>
{% endblock %}
