{% extends "shared/layout.jinja" %}

{% block title %}
Notifications
{% endblock %}

{% set fetch_roster_help_id = "fetch-roster-help" %}
{% set fetch_roster_btn_id = "fetch-roster-btn" %}
{% set fetch_roster_dummy_input_id = "fetch-roster-dummy-input" %}
{% set fetch_roster_messages_id = "fetch-roster-messages" %}
{% set clear_roster_btn_id = "clear-roster-btn" %}

{% set match_numbers_input_id = "match-numbers-input" %}
{% set fetch_matches_btn_id = "fetch-matches-btn" %}
{% set set_last_matches_query_btn_id = "set-last-matches-query-btn" %}

{% set fetch_matches_warnings_id = "fetch-matches-warnings" %}
{% set fetch_matches_warning_alert_id = "fetch-matches-warning-alert" %}

{% set matches_fetch_info_id = "matches-fetch-info" %}
{% set last_matches_query_id = "last-matches-query" %}
{% set refresh_matches_btn_id = "refresh-matches-btn" %}
{% set refresh_matches_status_id = "refresh-matches-status" %}

{% set matches_info_table_id = "matches-info-table" %}
{% set remove_all_matches_btn_id = "remove-all-matches-btn" %}
{% set no_matches_row_id = "no-matches-row" %}

{% set email_items_col_class = "email-items-col" %}
{% set mc_templates_dropdown_wrapper_id = "mc-templates-dropdown-wrapper" %}
{% set mc_fetch_templates_id = "mc-fetch-templates" %}
{% set mc_templates_dropdown_id = "mc-templates-dropdown-id" %}
{% set email_subject_input_id = "email-subject-input" %}
{% set email_subject_help_id = "email-subject-help" %}
{% set send_to_coaches_checkbox_id = "send-to-coaches-checkbox" %}
{% set send_to_spectators_checkbox_id = "send-to-spectators-checkbox" %}

{% set send_notif_btn_id = "send-notification-btn" %}
{% set send_notif_error_id = "send-notification-error" %}
{% set blast_notif_btn_id = "send-blast-notification-btn" %}
{% set blast_notif_confirm_btn_id = "send-blast-notification-confirm-btn" %}
{% set blast_notif_modal_id = "send-blast-notification-modal" %}
{% set send_notif_messages_id = "send-notification-messages" %}

{% set flashed = get_flashed_by_categories(subcategories=true) %}

{% block body %}
<div id="notifications-body" class="container-fluid">
  <h2>Notifications</h2>
  {% if has_all_admin_settings_error is not none %}
  <div class="row mb-2">
    <div class="col">
      {% call macros.bs_alert("danger", dismissible=false) %}
      <div><strong>Error: Admin settings are not all set</strong></div>
      <div>{{ has_all_admin_settings_error|e }}</div>
      <div>
        Please visit the
        <a href="{{ url_for('admin_settings') }}">Admin Settings</a> page to
        resolve the error.
      </div>
      {% endcall %}
    </div>
  </div>
  {% endif %}
  <div id="teams-roster-section" class="row mb-2">
    <div class="col">
      <h4>Teams Roster</h4>
      <div class="mb-2">
        The roster in the TMS spreadsheet will be fetched whenever the "Fetch
        Roster" button is pressed. There should be a worksheet called
        <code>{{ roster_worksheet_name }}</code> with the full teams roster. For
        full requirements, see help
        <a
          href="#{{ fetch_roster_help_id }}"
          data-bs-toggle="offcanvas"
          aria-controls="{{ fetch_roster_help_id }}"
        >here</a>.
      </div>
      {% if roster_last_fetched_time is not none %}
      {# assume there is a roster #}
      <div class="mb-2">
        You can view the full roster here:
        <a href="{{ url_for('view_full_roster') }}">Full Roster</a>
      </div>
      {% endif %}
      <div class="mb-2">
        <div class="row">
          <div class="col-auto">
            {{ macros.loading_btn(
                 fetch_roster_btn_id, "success", "Fetch Roster", "Fetching..."
               )
            }}
          </div>
          {% if roster_last_fetched_time is not none %}
          {# alerts have weird spacings, so need to also have "mt-2". add "mb-2"
             for additional spacing when this div wraps.
           #}
          <div class="col-auto my-2">
            {% call macros.bs_alert_sm("warning", dismissible=false) %}
            <strong>Warning:</strong> Fetching again will override the current
            roster.
            {% endcall %}
          </div>
          {% endif %}
        </div>
        <div class="row mb-2">
          <div class="col">
            <input type="hidden" id="{{ fetch_roster_dummy_input_id }}" />
            <div
              id="{{ fetch_roster_dummy_input_id }}-invalid"
              class="invalid-feedback"
            ></div>
          </div>
        </div>
        {{ macros.flashed_messages(
             fetch_roster_messages_id, flashed["fetch-roster"]
           )
        }}
        {% if roster_last_fetched_time is not none %}
        <div class="row mb-2">
          <div class="col-auto">
            {{ macros.confirm_btn(
                 clear_roster_btn_id,
                 "Clear Roster",
                 "clear the full roster",
                 loading_text="Clearing...",
               )
            }}
          </div>
        </div>
        {% endif %}
        <div class="row mb-2">
          <div class="col">
            Last fetched:
            {% if roster_last_fetched_time is none %}
            <em class="text-muted">never</em>
            {% else %}
            {{ roster_last_fetched_time }}
            {% if has_fetch_logs %}
            <a href="{{ url_for('fetch_roster_logs') }}">(logs)</a>
            {% endif %}
            {% endif %}
          </div>
        </div>
      </div>
    </div>
    <div
      id="{{ fetch_roster_help_id }}"
      class="offcanvas offcanvas-end"
      tabindex="-1"
      aria-labelledby="{{ fetch_roster_help_id }}-title"
      data-bs-scroll="true"
    >
      <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="{{ fetch_roster_help_id }}-title">
          Fetch Roster Help
        </h5>
        {{ macros.bs_close_btn(dismiss="offcanvas") }}
      </div>
      <div class="offcanvas-body">
        <p>
          In the given TMS spreadsheet in the
          <a href="{{ url_for('admin_settings') }}">Admin Settings</a> page,
          there should be a worksheet called
          <code>{{ roster_worksheet_name }}</code> with the full teams roster.
        </p>
        <p>
          The first row should be the header row with the following headers:
        </p>
        <div>
          <table class="table table-bordered">
            <tr>
              <th scope="row">First Name</th>
              <td>The first name.</td>
            </tr>
            <tr>
              <th scope="row">Last Name</th>
              <td>The last name.</td>
            </tr>
            <tr>
              <th scope="row">Email</th>
              <td>The email. Must be unique in lowercase.</td>
            </tr>
            <tr>
              <th scope="row">Role</th>
              <td>
                The possible roles are:
                <ul>
                  {% for role in possible_roles %}
                  <li><code>{{ role }}</code></li>
                  {% endfor %}
                </ul>
                These values are case insensitive.
              </td>
            </tr>
            <tr>
              <th scope="row">School</th>
              <td>The school.</td>
            </tr>
            <tr>
              <th scope="row">Team Code</th>
              <td>
                The team code (e.g., <code>PA1</code>, <code>Women's B2</code>,
                etc).
              </td>
            </tr>
            <tr>
              <th scope="row">Fighting Weight Class</th>
              <td>
                The possible weights are:
                <ul>
                  {% for weight in possible_weights %}
                  <li><code>{{ weight }}</code></li>
                  {% endfor %}
                </ul>
                These values are case insensitive.
              </td>
            </tr>
          </table>
        </div>
        <p>
          The headers themselves are case insensitive and must be unique in the
          headers row. This means you cannot have a column called
          <code>Email</code> and another column called <code>EMAIL</code>, as
          these two would be considered the same, and it would be ambiguous
          which column should be used. However, any values not in this list will
          be skipped, so all the other values in the headers row do not matter.
        </p>
        <p>
          The email, role, and school columns are required for each row, and at
          least one of the name columns are required for each row.
        </p>
        <p>
          Coaches and spectators (technically not required) should be specified
          with values in the required columns. Since they aren't on any teams,
          the <code>Team Code</code> and <code>Fighting Weight Class</code>
          values will be ignored for those rows.
        </p>
        <p>
          Athlete rows represent the athlete's role on a single team, so the
          same athlete may have multiple rows if they are on multiple teams
          (on poomsae and sparring teams or as an alternate on another team).
          The <code>Team Code</code> value is required for athletes. Sparring
          teams require a <code>Fighting Weight Class</code> value (could be
          <code>Alternate</code>), and poomsae teams should not have a
          <code>Fighting Weight Class</code> value (unless it is
          <code>Alternate</code>).
        </p>
        <p>
          When the "Fetch Roster" button is clicked, the
          <code>{{ roster_worksheet_name }}</code> worksheet will be fetched as
          specified. After a successful fetch, logs will be generated. It could
          be helpful to check the logs for any potential warnings or errors. For
          example, a team may have only alternates and no main team members, or
          a school may have only coaches and spectators and no athletes or
          teams. Invalid teams will not be saved.
        </p>
        <p>
          Whenever the "Fetch Roster" button is clicked, the existing saved
          roster will be wiped, and the data from the TMS spreadsheet will
          replace it. This means that roster changes will be reflected (deleted
          rows will be removed, unchanged rows will remain, and new rows will
          be added).
        </p>
      </div>
    </div>
  </div>
  <div id="send-notifications-section" class="row mb-2">
    <div class="col">
      <div class="row">
        <div class="col">
          <h4>Send Match Notifications</h4>
        </div>
      </div>
      {{ macros.flashed_messages(send_notif_messages_id, flashed["send-notif"])
      }}
      <div class="row">
        <div class="col">
          <div class="mb-2">
            Enter the match numbers below that you want to send notifications
            for. The matches will keep being added to the matches queue, which
            you can edit as needed, until the "Send Notification" button is
            pressed. To restore the state of the last queue, click the "Last
            Query" button.
          </div>
          <div class="mb-2">
            The TMS spreadsheet should have a worksheet called
            <code>{{ matches_worksheet_name }}</code> which will be queried to
            find the competing teams for each match.
          </div>
        </div>
      </div>
      <div class="row mb-2">
        {# want the switch back to auto somewhere between xs and sm, but not
           possible without customizing the breakpoints
         #}
        <div class="col-xs-auto col-md col-xl-auto">
          <div class="row">
            {{ macros.form_input_label(match_numbers_input_id, "Add Matches") }}
            <div class="col pe-0">
              {{ macros.form_input(
                   match_numbers_input_id, placeholder="e.g., 101-104"
                 )
              }}
              <div class="form-text">
                The match numbers should be separated by spaces or commas. You
                may use dashes for match number ranges.
              </div>
            </div>
          </div>
        </div>
        <div class="col-auto pe-0">
          {{ macros.loading_btn(
               fetch_matches_btn_id,
               "success",
               "Fetch Matches Info",
               "Fetching...",
             )
          }}
        </div>
        <div class="col-auto">
          <button
            type="button"
            id="{{ set_last_matches_query_btn_id }}"
            {% with hidden = "d-none" if last_matches_query is none else "" %}
            class="btn btn btn-secondary {{ hidden }}"
            {% endwith %}
            lastquery="{{ last_matches_query or '' }}"
          >
            Last Query
          </button>
        </div>
      </div>
      <div class="row mb-2">
        <div class="col">
          <div id="{{ fetch_matches_warnings_id }}"></div>
        </div>
      </div>
      <div class="row mb-2">
        <div class="col">
          <div id="{{ matches_fetch_info_id }}" class="d-none">
            Matches query:
            <span id="{{ last_matches_query_id }}" class="me-1"></span>
            {% call macros.loading_btn(
                 refresh_matches_btn_id,
                 "outline-success",
                 "Refresh",
                 "Refreshing...",
                 classes="btn-sm me-1",
               )
            %}
            disabled
            {% endcall %}
            <span
              id="{{ refresh_matches_status_id }}"
              class="text-danger d-none"
            ></span>
          </div>
        </div>
      </div>
      <div class="row mb-2">
        <div class="col table-responsive">
          <table class="table table-striped table-hover align-middle">
            <thead class="align-middle">
              <tr>
                <th class="table-sm-col">Match</th>
                <th class="table-sm-col">Division</th>
                <th class="table-sm-col">Round</th>
                <th class="table-sm-col">Status</th>
                <th class="table-primary">Blue Team</th>
                <th class="table-danger">Red Team</th>
                <th class="table-sm-col">Valid</th>
                <th class="table-sm-col text-center">
                  <button
                    type="button"
                    id="{{ remove_all_matches_btn_id }}"
                    class="btn btn-sm btn-danger"
                    disabled
                  >
                    Remove All
                  </button>
                </th>
              </tr>
            </thead>
            <tbody id="{{ matches_info_table_id }}">
              <tr id="{{ no_matches_row_id }}">
                <td colspan="8">
                  <em>No matches</em>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
      <div class="row">
        <div class="col-md-auto">
          <table class="table table-sm table-borderless">
            <tr>
              {% if has_all_admin_settings_error is none %}
              <td class="table-sm-col">
                {# the id of the select is from
                   `src/templates/notifications/templates_info.jinja`
                 #}
                {{ macros.form_label(
                     "mc-template-select", "Template", "col-form-label"
                   )
                }}
              </td>
              <td
                id="{{ mc_templates_dropdown_wrapper_id }}"
                class="{{ email_items_col_class }}"
              >
                <div id="{{ mc_fetch_templates_id }}" class="col-form-label">
                  {# will be replaced when templates are fetched #}
                  <div
                    class="spinner-border spinner-border-sm"
                    role="status"
                  ></div>
                  Fetching Templates...
                </div>
              </td>
              {% else %}
              <td class="table-sm-col">Template</td>
              <td class="{{ email_items_col_class }}">
                <em class="text-muted">Cannot fetch templates</em>
              </td>
              {% endif %}
            </tr>
            <tr>
              <td class="table-sm-col">
                {{ macros.form_label(
                     email_subject_input_id, "Subject", "col-form-label"
                   )
                }}
              </td>
              <td class="{{ email_items_col_class }}">
                {{ macros.form_input(
                     email_subject_input_id,
                     value=last_subject,
                     placeholder="e.g., Match {match}: Report to Holding"
                   )
                }}
                <div class="form-text">
                  You must use the placeholder <code>{match}</code> to indicate
                  the match number. For the full placeholder list and subject
                  specifications, see help
                  <a
                    href="#{{ email_subject_help_id }}"
                    data-bs-toggle="offcanvas"
                    aria-controls="{{ email_subject_help_id }}"
                  >here</a>.
                </div>
              </td>
            </tr>
            <tr>
              <td class="table-sm-col">
                Also Send To
              </td>
              <td class="{{ email_items_col_class }}">
                {{ macros.form_checkbox(
                     send_to_coaches_checkbox_id,
                     "School Coaches",
                     checked=send_to_coaches,
                   )
                }}
                {{ macros.form_checkbox(
                     send_to_spectators_checkbox_id,
                     "School Spectators",
                     checked=send_to_spectators,
                   )
                }}
                <div class="form-text">
                  Note that if there are multiple matches with the same school
                  being sent, these people will receive multiple notifications
                  as well.
                </div>
              </td>
            </tr>
          </table>
          <div
            id="{{ email_subject_help_id }}"
            class="offcanvas offcanvas-end"
            tabindex="-1"
            aria-labelledby="{{ email_subject_help_id }}-title"
            data-bs-scroll="true"
          >
            <div class="offcanvas-header">
              <h5
                class="offcanvas-title"
                id="{{ email_subject_help_id }}-title"
              >
                Email Subject Help
              </h5>
              {{ macros.bs_close_btn(dismiss="offcanvas") }}
            </div>
            <div class="offcanvas-body">
              <p>
                The email subject can be customized on a per-match or per-team
                basis by using placeholder variables. These placeholders will be
                replaced with their corresponding values in the subjects of the
                sent emails. Here is a list of the available placeholders:
              </p>
              <div>
                <table class="table table-bordered">
                  <tr>
                    <td scope="row">
                      <code>{match}</code>
                    </td>
                    <td>The match number (required in the subject).</td>
                  </tr>
                  <tr>
                    <td scope="row">
                      <code>{division}</code>
                    </td>
                    <td>The division (as seen in the TMS).</td>
                  </tr>
                  <tr>
                    <td scope="row">
                      <code>{round}</code>
                    </td>
                    <td>The round (as seen in the TMS).</td>
                  </tr>
                  <tr>
                    <td scope="row">
                      <code>{blueteam}</code>
                    </td>
                    <td>The name of the blue team.</td>
                  </tr>
                  <tr>
                    <td scope="row">
                      <code>{redteam}</code>
                    </td>
                    <td>The name of the red team.</td>
                  </tr>
                  <tr>
                    <td scope="row">
                      <code>{team}</code>
                    </td>
                    <td>
                      The name of the team receiving the email (will be
                      different for both teams).
                    </td>
                  </tr>
                </table>
              </div>
              <p>
                Placeholders are case insensitive and may be given multiple
                times. Invalid placeholders will be rejected.
              </p>
              <p>
                For example, a simple subject could look like:
              </p>
              <p>
                <input
                  type="text"
                  class="form-control"
                  value="Match {match}: Report to Holding"
                  disabled
                  readonly
                />
              </p>
              <p>
                Or, if you want to get fancier, something like:
              </p>
              <p>
                <input
                  type="text"
                  class="form-control"
                  value="Match #{match} [{division}, {round}]: {blueteam} & {redteam}: Report to Holding!"
                  disabled
                  readonly
                />
              </p>
              <p>
                Note that the character set for the subject is limited to
                letters, digits, spaces, and any of the following:
                <code>{{ EMAIL_SUBJECT_VALID_CHARS }}</code>.
              </p>
              <p>
                You cannot use placeholders for blast email subjects, since
                there is no match data to populate the variables.
              </p>
            </div>
          </div>
          <div class="mb-1">
            {{ macros.loading_btn(
                 send_notif_btn_id, "primary", "Send Notification", "Sending..."
               )
            }}
            {% call macros.loading_btn(
                 blast_notif_btn_id,
                 "warning",
                 "Send Blast Notification",
                 "Sending...",
                 classes="ms-2",
               )
             %}
            data-bs-toggle="modal"
            data-bs-target="#{{ blast_notif_modal_id }}"
            {% endcall %}
          </div>
          <div id="{{ send_notif_error_id }}" class="text-danger"></div>
          {% if has_all_admin_settings_error is none %}
          {% with modal_title = blast_notif_modal_id ~ "-title" %}
          <div
            id="{{ blast_notif_modal_id }}"
            class="modal fade"
            tabindex="-1"
            aria-labelledby="{{ modal_title }}"
            aria-hidden="true"
          >
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 id="{{ modal_title }}" class="modal-title">
                    Send Blast Notification
                  </h5>
                  {{ macros.bs_close_btn(dismiss="modal") }}
                </div>
                <div class="modal-body">
                  {% if audience_tag is none %}
                  <p>
                    Are you sure you want to send a blast notification email to
                    all contacts in the selected audience?
                  </p>
                  <p>
                    If you specify the audience tag on the
                    <a href="{{ url_for('admin_settings') }}">Admin Settings</a>
                    page, this button will instead send a notification email
                    only to the contacts with that tag.
                  </p>
                  {% else %}
                  Are you sure you want to send a blast notification email to
                  all contacts with the tag <code>{{ audience_tag }}</code>?
                  {% endif %}
                </div>
                <div class="modal-footer">
                  <button
                    type="button"
                    class="btn btn-danger"
                    data-bs-dismiss="modal"
                  >
                    No
                  </button>
                  <button
                    type="button"
                    id="{{ blast_notif_confirm_btn_id }}"
                    class="btn btn-success"
                    data-bs-dismiss="modal"
                  >
                    Yes
                  </button>
                </div>
              </div>
            </div>
          </div>
          {% endwith %}
          {% endif %}
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block script %}
<script>
  function handleFetchRosterClicked() {
    if (
      isButtonLoading('{{ send_notif_btn_id }}') ||
      isButtonLoading('{{ blast_notif_btn_id }}')
    ) {
      // currently sending something; ignore this
      return;
    }
    if (isButtonLoading('{{ fetch_roster_btn_id }}')) {
      // currently fetching; ignore click
      return;
    }

    // clear messages
    $('#{{ fetch_roster_messages_id }}').html('');
    clearInvalid('{{ fetch_roster_dummy_input_id }}');

    setButtonLoading('{{ fetch_roster_btn_id }}');
    ajaxRequest('POST', '{{ url_for("fetch_roster") }}', {
      success: (response, status, jqXHR) => {
        if (response.success) {
          // reload the page
          location.reload();
        } else {
          // some failure
          stopButtonLoading('{{ fetch_roster_btn_id }}');
          setInvalid(
            '{{ fetch_roster_dummy_input_id }}',
            response.reason ?? 'Unknown error: please try again'
          );
        }
      },
      error: (jqXHR, status, errorThrown) => {
        stopButtonLoading('{{ fetch_roster_btn_id }}');
        setInvalid('{{ fetch_roster_dummy_input_id }}', jqXHR.statusText);
      },
    });
  }

  function handleClearRosterClicked() {
    if (
      isButtonLoading('{{ send_notif_btn_id }}') ||
      isButtonLoading('{{ blast_notif_btn_id }}')
    ) {
      // currently sending something; ignore this
      return;
    }
    if (isButtonLoading('{{ clear_roster_btn_id }}')) {
      // currently clearing; ignore click
      return;
    }

    // clear messages
    $('#{{ fetch_roster_messages_id }}').html('');

    setButtonLoading('{{ clear_roster_btn_id }}');
    // just reload once the clearing is done
    ajaxRequest('DELETE', '{{ url_for("fetch_roster") }}');
  }

  function getCurrentMatchRows({ onlyNumbers = false } = {}) {
    // get the match data of all the rows in the table
    const currentMatches = [];
    $('.match-row').each((index, element) => {
      const matchDataStr = getAttr(element.id, 'matchdata');
      if (matchDataStr === '') return;
      let matchData;
      try {
        matchData = JSON.parse(matchDataStr);
      } catch (e) {
        // not in valid json format; ignore
        return;
      }
      if (onlyNumbers) {
        currentMatches.push(matchData.number);
      } else {
        currentMatches.push(matchData);
      }
    });
    return currentMatches;
  }

  function handleSetLastMatchesQueryClicked() {
    if (
      isButtonLoading('{{ send_notif_btn_id }}') ||
      isButtonLoading('{{ blast_notif_btn_id }}')
    ) {
      // currently sending something; ignore this
      return;
    }

    resetSendNotificationErrors();

    const lastMatchesQuery = getAttr(
      '{{ set_last_matches_query_btn_id }}',
      'lastquery'
    );
    if (lastMatchesQuery === '') {
      return;
    }
    // set match numbers input value
    $('#{{ match_numbers_input_id }}').val(lastMatchesQuery);
  }

  function resetMatchesTable({ clearWarnings = true } = {}) {
    if (
      isButtonLoading('{{ send_notif_btn_id }}') ||
      isButtonLoading('{{ blast_notif_btn_id }}')
    ) {
      // currently sending something; ignore this
      return;
    }

    // disable the remove all button
    $('#{{ remove_all_matches_btn_id }}').prop('disabled', true);
    if (clearWarnings) {
      // clear and hide the warnings
      $('#{{ fetch_matches_warnings_id }}').addClass('d-none').html('');
    }
    // hide the fetch info
    $('#{{ matches_fetch_info_id }}').addClass('d-none');
    $('#{{ last_matches_query_id }}').html('');
    $('#{{ refresh_matches_btn_id }}').prop('disabled', true); // just in case
    $('#{{ refresh_matches_status_id }}').addClass('d-none').html('');
    // clear the matches query input
    $('#{{ match_numbers_input_id }}').val('');
    // show the no matches row
    $('#{{ no_matches_row_id }}').removeClass('d-none');
    // delete all the other rows
    $('.match-row').remove();
  }

  function populateMatchInfoTable(response) {
    const $warningsDiv = $('#{{ fetch_matches_warnings_id }}');
    // clear warnings
    $warningsDiv.html('');
    // add warnings
    const warnings = response.warnings;
    if (warnings.length > 0) {
      // create warning alert
      $warningsDiv.html(
        bsAlert('<div><strong>Warnings:</strong></div>', 'warning', {
          textId: '{{ fetch_matches_warning_alert_id }}',
        })
      );
      // populate warnings
      const $alert = $('#{{ fetch_matches_warning_alert_id }}');
      for (const warning of warnings) {
        $alert.append(`<div>${warning}</div>`);
      }
    }
    const matchesRowsHtml = response['matches_rows_html'];
    if (matchesRowsHtml == null) {
      // no matches; reset table
      // there are possible warnings from above, so don't clear them
      resetMatchesTable({ clearWarnings: false });
      return;
    }
    const lastMatchesQuery = response['last_matches_query'];
    // show the fetch info
    $('#{{ refresh_matches_btn_id }}').prop('disabled', false);
    $('#{{ last_matches_query_id }}').html(lastMatchesQuery);
    $('#{{ matches_fetch_info_id }}').removeClass('d-none');
    // update last query button
    $('#{{ set_last_matches_query_btn_id }}')
      .removeClass('d-none')
      .attr('lastquery', lastMatchesQuery);
    // enable remove all button
    $('#{{ remove_all_matches_btn_id }}').prop('disabled', false);
    // clear the table
    $('.match-row').remove();
    // add the results to the table
    $('#{{ no_matches_row_id }}').addClass('d-none');
    $('#{{ matches_info_table_id }}').append(matchesRowsHtml);
  }

  function handleFetchMatchInfoClicked() {
    if (
      isButtonLoading('{{ send_notif_btn_id }}') ||
      isButtonLoading('{{ blast_notif_btn_id }}')
    ) {
      // currently sending something; ignore this
      return;
    }
    if (
      isButtonLoading('{{ fetch_matches_btn_id }}') ||
      isButtonLoading('{{ refresh_matches_btn_id }}')
    ) {
      // currently fetching; ignore the click
      return;
    }

    resetSendNotificationErrors();

    clearInvalid('{{ match_numbers_input_id }}');
    $('#{{ refresh_matches_status_id }}').addClass('d-none').html('');

    const matchesQuery = getInputValue('{{ match_numbers_input_id }}');
    if (matchesQuery === '') {
      // Error: no match numbers given
      setInvalid(
        '{{ match_numbers_input_id }}',
        'Please enter a match number.'
      );
      return;
    }

    // get the current match numbers
    const currentMatchNumbers = getCurrentMatchRows({ onlyNumbers: true });
    const previousMatchesQuery = currentMatchNumbers.join(',');

    setButtonLoading('{{ fetch_matches_btn_id }}');
    ajaxRequest('GET', '{{ url_for("fetch_matches_info") }}', {
      data: { matches: matchesQuery, previous: previousMatchesQuery },
      success: (response, status, jqXHR) => {
        stopButtonLoading('{{ fetch_matches_btn_id }}');
        if (response.success) {
          // clear the input
          $('#{{ match_numbers_input_id }}').val('');
          populateMatchInfoTable(response);
        } else {
          // some failure
          setInvalid(
            '{{ match_numbers_input_id }}',
            response.reason ?? 'Unknown error: please try again'
          );
        }
      },
      error: (jqXHR, status, errorThrown) => {
        stopButtonLoading('{{ fetch_matches_btn_id }}');
        setInvalid('{{ match_numbers_input_id }}', jqXHR.statusText);
      },
    });
  }

  function refreshMatches() {
    if (
      isButtonLoading('{{ send_notif_btn_id }}') ||
      isButtonLoading('{{ blast_notif_btn_id }}')
    ) {
      // currently sending something; ignore this
      return;
    }
    if (
      isButtonLoading('{{ refresh_matches_btn_id }}') ||
      isButtonLoading('{{ fetch_matches_btn_id }}')
    ) {
      // currently fetching; ignore the click
      return;
    }

    resetSendNotificationErrors();

    // clear the input and any errors
    $('#{{ match_numbers_input_id }}').val('');
    clearInvalid('{{ match_numbers_input_id }}');
    $('#{{ refresh_matches_status_id }}').addClass('d-none').html('');

    const currentMatchNumbers = getCurrentMatchRows({ onlyNumbers: true });
    if (currentMatchNumbers.length === 0) {
      // no matches; do nothing
      return;
    }
    const matchesQuery = currentMatchNumbers.join(',');

    setButtonLoading('{{ refresh_matches_btn_id }}');
    ajaxRequest('GET', '{{ url_for("fetch_matches_info") }}', {
      data: { matches: matchesQuery },
      success: (response, status, jqXHR) => {
        stopButtonLoading('{{ refresh_matches_btn_id }}');
        if (response.success) {
          populateMatchInfoTable(response);
        } else {
          // some failure
          $('#{{ refresh_matches_status_id }}')
            .removeClass('d-none')
            .html(response.reason ?? 'Unknown error: please try again');
        }
      },
      error: (jqXHR, status, errorThrown) => {
        stopButtonLoading('{{ refresh_matches_btn_id }}');
        $('#{{ refresh_matches_status_id }}')
          .removeClass('d-none')
          .html(jqXHR.statusText);
      },
    });
  }

  function toggleMatchTeamMembers(elementId) {
    const $membersDiv = $('#' + elementId);
    const $toggleButton = $('#toggle-' + elementId);
    toggleDisplay($membersDiv, $toggleButton, {
      show: 'Show Members',
      hide: 'Hide Members',
    });
  }

  function removeMatchRow(matchNumber) {
    if (
      isButtonLoading('{{ send_notif_btn_id }}') ||
      isButtonLoading('{{ blast_notif_btn_id }}')
    ) {
      // currently sending something; ignore this
      return;
    }

    resetSendNotificationErrors();

    const $matchRow = $('#match-' + matchNumber);
    if ($matchRow.length === 0) return;
    $matchRow.remove();

    // update the matches query
    const currentMatchNumbers = getCurrentMatchRows({ onlyNumbers: true });
    if (currentMatchNumbers.length === 0) {
      // no more matches
      resetMatchesTable();
      return;
    }
    const matchesQuery = currentMatchNumbers.join(',');

    // update the matches query
    ajaxRequest('GET', '{{ url_for("get_matches_query") }}', {
      data: { matches: matchesQuery },
      success: (response, status, jqXHR) => {
        if (response.success) {
          const cleanMatchesQuery = response['matches_query'];
          // update matches query text
          $('#{{ last_matches_query_id }}').html(cleanMatchesQuery);
          // update last query button
          $('#{{ set_last_matches_query_btn_id }}').attr(
            'lastquery',
            cleanMatchesQuery
          );
        }
        // if error, do nothing
      },
      error: (jqXHR, status, errorThrown) => {
        // do nothing
      },
    });
  }

  function populateMailchimpTemplateDropdown() {
    const $loadingDiv = $('#{{ mc_fetch_templates_id }}');
    if ($loadingDiv.length === 0) return;

    ajaxRequest('GET', '{{ url_for("get_mailchimp_templates") }}', {
      success: (response, status, jqXHR) => {
        if (response.success) {
          // populate the templates
          $('#{{ mc_templates_dropdown_wrapper_id }}').html(
            response['templates_html']
          );
        } else {
          // some failure
          $('#{{ mc_templates_dropdown_wrapper_id }}').html(
            bsAlert(
              response.reason ?? 'Unknown error: please try again',
              'danger',
              { dismissible: false }
            )
          );
        }
      },
      error: (jqXHR, status, errorThrown) => {
        $('#{{ mc_templates_dropdown_wrapper_id }}').html(
          bsAlert(jqXHR.statusText, 'danger', { dismissible: false })
        );
      },
    });
  }

  {# this id is from `src/templates/notifications/templates_info.jinja` #}
  const TEMPLATE_SELECT_ID = 'mc-template-select';

  function resetSendNotificationErrors() {
    // clear messages
    $('#{{ send_notif_messages_id }}').html('');
    clearInvalid(TEMPLATE_SELECT_ID);
    clearInvalid('{{ email_subject_input_id }}');
    $('#{{ send_notif_error_id }}').html('');
  }

  function handleSendNotificationClicked(blast = false) {
    function generalError(msg) {
      $('#{{ send_notif_error_id }}').html(msg);
    }

    if (
      isButtonLoading('{{ send_notif_btn_id }}') ||
      isButtonLoading('{{ blast_notif_btn_id }}')
    ) {
      // currently sending something; ignore the click
      return;
    }

    resetSendNotificationErrors();

    let matches = [];
    if (!blast) {
      // server will validate match infos and return appropriate errors
      matches = getCurrentMatchRows();
      if (matches.length === 0) {
        generalError('No matches.');
        return;
      }
    }

    let invalid = false;

    const selectedTemplateId = getInputValue(TEMPLATE_SELECT_ID);
    if (selectedTemplateId === '') {
      invalid = true;
      setInvalid(TEMPLATE_SELECT_ID, 'Please select an email template.');
    }

    const emailSubject = getInputValue('{{ email_subject_input_id }}');
    if (emailSubject === '') {
      invalid = true;
      setInvalid('{{ email_subject_input_id }}', 'Please enter a subject.');
    } else if (!emailSubject.match(/^[A-Z0-9 \-_+.,!#&()[\]{}|:;'"/?]+$/i)) {
      // regexp should also include curly braces for placeholders
      // server will validate proper placeholders
      invalid = true;
      setInvalid(
        '{{ email_subject_input_id }}',
        'Subject contains illegal characters.'
      );
    }

    const sendToCoaches = getInputValue('{{ send_to_coaches_checkbox_id }}');
    const sendToSpectators = getInputValue(
      '{{ send_to_spectators_checkbox_id }}'
    );

    if (invalid) return;

    const loadingButtonId = blast
      ? '{{ blast_notif_btn_id }}'
      : '{{ send_notif_btn_id }}';
    setButtonLoading(loadingButtonId);

    // disable all the other buttons while sending a notification
    const disabledButtonIds = [];
    $('button').each((index, button) => {
      const buttonId = button.id;
      // if the button doesn't have an id, it likely doesn't do anything that
      // would mess up the sending, so ignore it
      if (buttonId === '') return;
      if (buttonId === loadingButtonId) return;
      const $button = $(button);
      if ($button.prop('disabled')) return;
      $button.prop('disabled', true);
      disabledButtonIds.push(buttonId);
    });

    ajaxRequest('POST', '{{ url_for("send_notification") }}', {
      contentType: 'application/json',
      data: JSON.stringify({
        blast: blast,
        templateId: selectedTemplateId,
        subject: emailSubject,
        sendToCoaches: sendToCoaches,
        sendToSpectators: sendToSpectators,
        matches: matches,
      }),
      success: (response, status, jqXHR) => {
        stopButtonLoading(loadingButtonId);
        // re-enable all the other buttons again
        for (const buttonId of disabledButtonIds) {
          $('#' + buttonId).prop('disabled', false);
        }
        if (response.success) {
          if (blast) {
            // success
            $('#{{ send_notif_messages_id }}').html(
              bsAlert(response.message, 'success')
            );
          } else {
            // reload the page
            location.reload();
          }
        } else {
          // some failure(s)
          const errorMessages = response.errors ?? {};
          let errorSomewhere = false;

          const templateError = errorMessages['TEMPLATE'];
          if (templateError != null) {
            errorSomewhere = true;
            setInvalid(TEMPLATE_SELECT_ID, templateError);
          }

          const subjectError = errorMessages['SUBJECT'];
          if (subjectError != null) {
            errorSomewhere = true;
            setInvalid('{{ email_subject_input_id }}', subjectError);
          }

          const errorMessage = errorMessages['GENERAL'];
          if (errorMessage != null) {
            errorSomewhere = true;
            generalError(errorMessage);
          }

          if (!errorSomewhere) {
            generalError('Unknown error: please try again');
          }
        }
      },
      error: (jqXHR, status, errorThrown) => {
        stopButtonLoading(loadingButtonId);
        // re-enable all the other buttons again
        for (const buttonId of disabledButtonIds) {
          $('#' + buttonId).prop('disabled', false);
        }
        generalError(jqXHR.statusText);
      },
    });
  }

  $(document).ready(() => {
    {% if has_all_admin_settings_error is not none %}
    // There is an error; disable all inputs
    $('input,button').prop('disabled', true);
    {% else %}
    // Fetch roster
    $('#{{ fetch_roster_btn_id }}').click((event) => {
      handleFetchRosterClicked();
    });
    $('#{{ clear_roster_btn_id }}').click((event) => {
      handleClearRosterClicked();
    });
    // clear the flashed text after 60 seconds
    clearElementAfter('{{ fetch_roster_messages_id }}', 60);

    // Fetch match info
    $('#{{ match_numbers_input_id }}').onEnterKeyPress((event) => {
      $('#{{ fetch_matches_btn_id }}').click();
    });
    $('#{{ fetch_matches_btn_id }}').click((event) => {
      handleFetchMatchInfoClicked();
    });
    $('#{{ set_last_matches_query_btn_id }}').click((event) => {
      handleSetLastMatchesQueryClicked();
    });
    $('#{{ refresh_matches_btn_id }}').click((event) => {
      refreshMatches();
    });
    $('#{{ remove_all_matches_btn_id }}').click((event) => {
      resetMatchesTable();
    });

    // Send notifications
    populateMailchimpTemplateDropdown();
    $('#{{ send_notif_btn_id }}').click((event) => {
      handleSendNotificationClicked();
    });
    // clear the flashed text after 60 seconds
    clearElementAfter('{{ send_notif_messages_id }}', 60);
    // Blast notifications
    $('#{{ blast_notif_confirm_btn_id }}').click((event) => {
      handleSendNotificationClicked(true);
    });
    {% endif %}
  });
</script>
{% endblock %}
