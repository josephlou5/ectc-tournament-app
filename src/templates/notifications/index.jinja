{% extends "shared/layout.jinja" %}

{% block title %}
Notifications
{% endblock %}

{% set fetch_roster_help_id = "fetch-roster-help" %}
{% set fetch_roster_btn_id = "fetch-roster-btn" %}
{% set fetch_roster_dummy_input_id = "fetch-roster-dummy-input" %}
{% set fetch_roster_messages_id = "fetch-roster-messages" %}
{% set clear_roster_btn_id = "clear-roster-btn" %}

{% set match_numbers_input_id = "match-numbers-input" %}
{% set fetch_matches_btn_id = "fetch-matches-btn" %}
{% set set_last_matches_query_btn_id = "set-last-matches-query-btn" %}

{% set fetch_matches_warnings_id = "fetch-matches-warnings" %}
{% set fetch_matches_warning_alert_id = "fetch-matches-warning-alert" %}

{% set matches_fetch_info_id = "matches-fetch-info" %}
{% set last_matches_query_id = "last-matches-query" %}
{% set refresh_matches_btn_id = "refresh-matches-btn" %}
{% set refresh_matches_status_id = "refresh-matches-status" %}

{% set matches_info_table_id = "matches-info-table" %}
{% set delete_all_matches_btn_id = "delete-all-matches-btn" %}
{% set no_matches_row_id = "no-matches-row" %}

{% set send_notif_btn_id = "send-notification-btn" %}

{% set flashed = get_flashed_by_categories(subcategories=true) %}

{% block body %}
<div id="notifications-body" class="container-fluid">
  <h2>Notifications</h2>
  {% if has_all_admin_settings_error is not none %}
  <div class="row mb-2">
    <div class="col">
      {% call macros.bs_alert("danger", dismissible=false) %}
      <div><strong>Error: Admin settings are not all set</strong></div>
      <div>{{ has_all_admin_settings_error|e }}</div>
      <div>
        Please visit the
        <a href="{{ url_for('admin_settings') }}">Admin Settings</a> page to
        resolve the error.
      </div>
      {% endcall %}
    </div>
  </div>
  {% endif %}
  <div id="teams-roster-section" class="row mb-2">
    <div class="col">
      <h4>Teams Roster</h4>
      <div class="mb-2">
        The roster in the TMS spreadsheet will be fetched whenever the "Fetch
        Roster" button is pressed. There should be a worksheet called
        <code>{{ roster_worksheet_name }}</code> with the full teams roster. For
        full requirements, see help
        <a
          href="#{{ fetch_roster_help_id }}"
          data-bs-toggle="offcanvas"
          aria-controls="{{ fetch_roster_help_id }}"
        >here</a>.
      </div>
      {% if roster_last_fetched_time is not none %}
      {# assume there is a roster #}
      <div class="mb-2">
        You can view the full roster here:
        <a href="{{ url_for('view_full_roster') }}">Full Roster</a>
      </div>
      {% endif %}
      <div class="mb-2">
        <div class="row">
          <div class="col-auto">
            {{ macros.loading_btn(
                 fetch_roster_btn_id, "success", "Fetch Roster", "Fetching..."
               )
            }}
          </div>
          {% if roster_last_fetched_time is not none %}
          {# alerts have weird spacings, so need to also have "mt-2". add "mb-2"
             for additional spacing when this div wraps.
           #}
          <div class="col-auto my-2">
            {% call macros.bs_alert_sm("warning", dismissible=false) %}
            <strong>Warning:</strong> Fetching again will override the current
            roster.
            {% endcall %}
          </div>
          {% endif %}
        </div>
        <div class="row mb-2">
          <div class="col">
            <input type="hidden" id="{{ fetch_roster_dummy_input_id }}" />
            <div
              id="{{ fetch_roster_dummy_input_id }}-invalid"
              class="invalid-feedback"
            ></div>
          </div>
        </div>
        <div class="row">
          <div id="{{ fetch_roster_messages_id }}" class="col-auto">
            {% for accent, messages in flashed["fetch-roster"].items() %}
            {% for message in messages %}
            {% call macros.bs_alert(accent) %}
            {{ message }}
            {% endcall %}
            {% endfor %}
            {% endfor %}
          </div>
        </div>
        {% if roster_last_fetched_time is not none %}
        <div class="row mb-2">
          <div class="col-auto">
            {{ macros.confirm_btn(
                 clear_roster_btn_id,
                 "Clear Roster",
                 "clear the full roster",
                 loading_text="Clearing...",
               )
            }}
          </div>
        </div>
        {% endif %}
        <div class="row mb-2">
          <div class="col">
            Last fetched:
            {% if roster_last_fetched_time is none %}
            <em class="text-muted">never</em>
            {% else %}
            {{ roster_last_fetched_time }}
            {% if has_fetch_logs %}
            <a href="{{ url_for('fetch_roster_logs') }}">(logs)</a>
            {% endif %}
            {% endif %}
          </div>
        </div>
      </div>
    </div>
    <div
      id="{{ fetch_roster_help_id }}"
      class="offcanvas offcanvas-end"
      tabindex="-1"
      aria-labelledby="{{ fetch_roster_help_id }}-title"
      data-bs-scroll="true"
    >
      <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="{{ fetch_roster_help_id }}-title">
          Fetch Roster Help
        </h5>
        {{ macros.bs_close_btn(dismiss="offcanvas") }}
      </div>
      <div class="offcanvas-body">
        <p>
          In the given TMS spreadsheet in the
          <a href="{{ url_for('admin_settings') }}">Admin Settings</a> page,
          there should be a worksheet called
          <code>{{ roster_worksheet_name }}</code> with the full teams roster.
        </p>
        <p>
          The first row should be the header row with the following headers:
        </p>
        <div>
          <table class="table table-bordered">
            <tr>
              <th scope="row">First Name</th>
              <td>The first name.</td>
            </tr>
            <tr>
              <th scope="row">Last Name</th>
              <td>The last name.</td>
            </tr>
            <tr>
              <th scope="row">Email</th>
              <td>The email. Must be unique.</td>
            </tr>
            <tr>
              <th scope="row">Role</th>
              <td>
                The possible roles are:
                <ul>
                  {% for role in possible_roles %}
                  <li><code>{{ role }}</code></li>
                  {% endfor %}
                </ul>
                These values are case insensitive.
              </td>
            </tr>
            <tr>
              <th scope="row">School</th>
              <td>The school.</td>
            </tr>
            <tr>
              <th scope="row">Team Code</th>
              <td>
                The team code (e.g., <code>PA1</code>, <code>Women's B2</code>,
                etc).
              </td>
            </tr>
            <tr>
              <th scope="row">Fighting Weight Class</th>
              <td>
                The possible weights are:
                <ul>
                  {% for weight in possible_weights %}
                  <li><code>{{ weight }}</code></li>
                  {% endfor %}
                </ul>
                These values are case insensitive.
              </td>
            </tr>
          </table>
        </div>
        <p>
          The headers themselves are case insensitive and must be unique in the
          headers row. This means you cannot have a column called
          <code>Email</code> and another column called <code>EMAIL</code>, as
          these two would be considered the same, and it would be ambiguous
          which column should be used. However, any values not in this list will
          be skipped, so all the other values in the headers row do not matter.
        </p>
        <p>
          The email, role, and school columns are required for each row, and at
          least one of the name columns are required for each row.
        </p>
        <p>
          Coaches and spectators (technically not required) should be specified
          with values in the required columns. Since they aren't on any teams,
          the <code>Team Code</code> and <code>Fighting Weight Class</code>
          values will be ignored for those rows.
        </p>
        <p>
          Athlete rows represent the athlete's role on a single team, so the
          same athlete may have multiple rows if they are on multiple teams
          (on poomsae and sparring teams or as an alternate on another team).
          The <code>Team Code</code> value is required for athletes. Sparring
          teams require a <code>Fighting Weight Class</code> value (could be
          <code>Alternate</code>), and poomsae teams should not have a
          <code>Fighting Weight Class</code> value (unless it is
          <code>Alternate</code>).
        </p>
        <p>
          When the "Fetch Roster" button is clicked, the
          <code>{{ roster_worksheet_name }}</code> worksheet will be fetched as
          specified. After a successful fetch, logs will be generated. It could
          be helpful to check the logs for any potential warnings or errors. For
          example, a team may have only alternates and no main team members, or
          a school may have only coaches and spectators and no athletes or
          teams. Invalid teams will not be saved.
        </p>
        <p>
          Whenever the "Fetch Roster" button is clicked, the existing saved
          roster will be wiped, and the data from the TMS spreadsheet will
          replace it. This means that roster changes will be reflected (deleted
          rows will be removed, unchanged rows will remain, and new rows will
          be added).
        </p>
      </div>
    </div>
  </div>
  <div id="send-notifications-section" class="row mb-2">
    <div class="col">
      <div class="row">
        <div class="col">
          <h4>Send Match Notifications</h4>
          <div class="mb-2">
            Enter the match numbers below that you want to send notifications
            for. The matches will keep being added to the match queue, which you
            can edit as needed, until the "Send Notification" button is pressed.
            To restore the state of the last queue, click the "Last Query"
            button.
          </div>
          <div class="mb-2">
            The TMS spreadsheet should have a worksheet called
            <code>{{ matches_worksheet_name }}</code> which will be queried to
            find the competing teams for each match.
          </div>
        </div>
      </div>
      <div class="row mb-2">
        {# want the switch back to auto somewhere between xs and sm, but not
           possible without customizing the breakpoints
         #}
        <div class="col-xs-auto col-md col-xl-auto">
          <div class="row">
            <label
              for="{{ match_numbers_input_id }}"
              class="col-auto col-form-label pe-0"
            >
              Add Matches
            </label>
            <div class="col pe-0">
              <input
                type="text"
                id="{{ match_numbers_input_id }}"
                class="form-control"
                placeholder="e.g., 101-104"
              />
              <div
                id="{{ match_numbers_input_id }}-invalid"
                class="invalid-feedback"
              ></div>
              <div class="form-text">
                The match numbers should be separated by spaces or commas. You
                may use dashes for match number ranges.
              </div>
            </div>
          </div>
        </div>
        <div class="col-auto pe-0">
          {{ macros.loading_btn(
               fetch_matches_btn_id,
               "success",
               "Fetch Matches Info",
               "Fetching...",
             )
          }}
        </div>
        <div class="col-auto">
          <button
            type="button"
            id="{{ set_last_matches_query_btn_id }}"
            {% with hidden = "d-none" if last_matches_query is none else "" %}
            class="btn btn btn-secondary {{ hidden }}"
            {% endwith %}
            lastquery="{{ last_matches_query or '' }}"
          >
            Last Query
          </button>
        </div>
      </div>
      <div class="row mb-2">
        <div class="col">
          <div id="{{ fetch_matches_warnings_id }}"></div>
        </div>
      </div>
      <div class="row mb-2">
        <div class="col">
          <div id="{{ matches_fetch_info_id }}" class="d-none">
            Matches query:
            <span id="{{ last_matches_query_id }}" class="me-1"></span>
            {% call macros.loading_btn(
                 refresh_matches_btn_id,
                 "outline-success",
                 "Refresh",
                 "Refreshing...",
                 classes="btn-sm me-1",
               )
            %}
            disabled
            {% endcall %}
            <span
              id="{{ refresh_matches_status_id }}"
              class="text-danger d-none"
            ></span>
          </div>
        </div>
      </div>
      <div class="row mb-2">
        <div class="col table-responsive">
          <table class="table table-striped table-hover align-middle">
            <thead class="align-middle">
              <tr>
                <th class="table-sm-col">Match</th>
                <th class="table-sm-col">Division</th>
                <th class="table-sm-col">Round</th>
                <th class="table-sm-col">Status</th>
                <th class="table-primary">Blue Team</th>
                <th class="table-danger">Red Team</th>
                <th class="table-sm-col">Valid</th>
                <th class="table-sm-col text-center">
                  <button
                    type="button"
                    id="{{ delete_all_matches_btn_id }}"
                    class="btn btn-sm btn-danger"
                    disabled
                  >
                    Delete All
                  </button>
                </th>
              </tr>
            </thead>
            <tbody id="{{ matches_info_table_id }}">
              <tr id="{{ no_matches_row_id }}">
                <td colspan="7">No matches</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
      <div class="row">
        <div class="col">
          {# button currently does nothing #}
          {{ macros.loading_btn(
               send_notif_btn_id, "primary", "Send Notification", "Sending..."
             )
          }}
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block script %}
<script>
  function handleFetchRosterClicked() {
    if (isButtonLoading('{{ fetch_roster_btn_id }}')) {
      // currently fetching; ignore click
      return;
    }

    // clear messages
    $('#{{ fetch_roster_messages_id }}').html('');
    clearInvalid('{{ fetch_roster_dummy_input_id }}');

    setButtonLoading('{{ fetch_roster_btn_id }}');
    ajaxRequest('POST', '{{ url_for("fetch_roster") }}', {
      success: (response, status, jqXHR) => {
        if (response.success) {
          // reload the page
          location.reload();
        } else {
          // some failure
          stopButtonLoading('{{ fetch_roster_btn_id }}');
          setInvalid(
            '{{ fetch_roster_dummy_input_id }}',
            response.reason ?? 'Unknown error: please try again'
          );
        }
      },
      error: (jqXHR, status, errorThrown) => {
        stopButtonLoading('{{ fetch_roster_btn_id }}');
        setInvalid('{{ fetch_roster_dummy_input_id }}', jqXHR.statusText);
      },
    });
  }

  function handleClearRosterClicked() {
    if (isButtonLoading('{{ clear_roster_btn_id }}')) {
      // currently clearing; ignore click
      return;
    }

    // clear messages
    $('#{{ fetch_roster_messages_id }}').html('');

    setButtonLoading('{{ clear_roster_btn_id }}');
    // just reload once the clearing is done
    ajaxRequest('DELETE', '{{ url_for("fetch_roster") }}');
  }

  function getCurrentMatchRows({ onlyNumbers = false } = {}) {
    // get the match data of all the rows in the table
    const currentMatches = [];
    $('.match-row').each((index, element) => {
      const matchDataStr = getAttr(element.id, 'matchdata');
      if (matchDataStr === '') return;
      let matchData;
      try {
        matchData = JSON.parse(matchDataStr);
      } catch (e) {
        // not in valid json format; ignore
        return;
      }
      if (onlyNumbers) {
        currentMatches.push(matchData.number);
      } else {
        currentMatches.push(matchData);
      }
    });
    return currentMatches;
  }

  function handleSetLastMatchesQueryClicked() {
    const lastMatchesQuery = getAttr(
      '{{ set_last_matches_query_btn_id }}',
      'lastquery'
    );
    if (lastMatchesQuery === '') {
      return;
    }
    // set match numbers input value
    $('#{{ match_numbers_input_id }}').val(lastMatchesQuery);
  }

  function resetMatchesTable({ clearWarnings = true } = {}) {
    // disable the delete all button
    $('#{{ delete_all_matches_btn_id }}').prop('disabled', true);
    if (clearWarnings) {
      // clear and hide the warnings
      $('#{{ fetch_matches_warnings_id }}').addClass('d-none').html('');
    }
    // hide the fetch info
    $('#{{ matches_fetch_info_id }}').addClass('d-none');
    $('#{{ last_matches_query_id }}').html('');
    $('#{{ refresh_matches_btn_id }}').prop('disabled', true); // just in case
    $('#{{ refresh_matches_status_id }}').addClass('d-none').html('');
    // clear the matches query input
    $('#{{ match_numbers_input_id }}').val('');
    // show the no matches row
    $('#{{ no_matches_row_id }}').removeClass('d-none');
    // delete all the other rows
    $('.match-row').remove();
  }

  function populateMatchInfoTable(response) {
    const $warningsDiv = $('#{{ fetch_matches_warnings_id }}');
    // clear warnings
    $warningsDiv.html('');
    // add warnings
    const warnings = response.warnings;
    if (warnings.length > 0) {
      // create warning alert
      $warningsDiv.html(
        bsAlert('<div><strong>Warnings:</strong></div>', 'warning', {
          textId: '{{ fetch_matches_warning_alert_id }}',
        })
      );
      // populate warnings
      const $alert = $('#{{ fetch_matches_warning_alert_id }}');
      for (const warning of warnings) {
        $alert.append(`<div>${warning}</div>`);
      }
    }
    const matchesRowsHtml = response['matches_rows_html'];
    if (matchesRowsHtml == null) {
      // no matches; reset table
      // there are possible warnings from above, so don't clear them
      resetMatchesTable({ clearWarnings: false });
      return;
    }
    const lastMatchesQuery = response['last_matches_query'];
    // show the fetch info
    $('#{{ refresh_matches_btn_id }}').prop('disabled', false);
    $('#{{ last_matches_query_id }}').html(lastMatchesQuery);
    $('#{{ matches_fetch_info_id }}').removeClass('d-none');
    // update last query button
    $('#{{ set_last_matches_query_btn_id }}')
      .removeClass('d-none')
      .attr('lastquery', lastMatchesQuery);
    // enable delete all button
    $('#{{ delete_all_matches_btn_id }}').prop('disabled', false);
    // clear the table
    $('.match-row').remove();
    // add the results to the table
    $('#{{ no_matches_row_id }}').addClass('d-none');
    $('#{{ matches_info_table_id }}').append(matchesRowsHtml);
  }

  function handleFetchMatchInfoClicked() {
    if (isButtonLoading('{{ fetch_matches_btn_id }}')) {
      // currently fetching; ignore the click
      return;
    }
    if (isButtonLoading('{{ refresh_matches_btn_id }}')) {
      // currently refreshing; ignore the click
      return;
    }

    clearInvalid('{{ match_numbers_input_id }}');
    $('#{{ refresh_matches_status_id }}').addClass('d-none').html('');

    const matchesQuery = getInputValue('{{ match_numbers_input_id }}');
    if (matchesQuery === '') {
      // Error: no match numbers given
      setInvalid(
        '{{ match_numbers_input_id }}',
        'Please enter a match number.'
      );
      return;
    }

    // get the current match numbers
    const currentMatchNumbers = getCurrentMatchRows({ onlyNumbers: true });
    const previousMatchesQuery = currentMatchNumbers.join(',');

    setButtonLoading('{{ fetch_matches_btn_id }}');
    ajaxRequest('GET', '{{ url_for("fetch_matches_info") }}', {
      data: { matches: matchesQuery, previous: previousMatchesQuery },
      success: (response, status, jqXHR) => {
        stopButtonLoading('{{ fetch_matches_btn_id }}');
        if (response.success) {
          // clear the input
          $('#{{ match_numbers_input_id }}').val('');
          populateMatchInfoTable(response);
        } else {
          // some failure
          setInvalid(
            '{{ match_numbers_input_id }}',
            response.reason ?? 'Unknown error: please try again'
          );
        }
      },
      error: (jqXHR, status, errorThrown) => {
        stopButtonLoading('{{ fetch_matches_btn_id }}');
        setInvalid('{{ match_numbers_input_id }}', jqXHR.statusText);
      },
    });
  }

  function refreshMatches() {
    const refreshStatusId = '#refresh-matches-status';

    if (isButtonLoading('{{ refresh_matches_btn_id }}')) {
      // currently refreshing; ignore the click
      return;
    }
    if (isButtonLoading('{{ fetch_matches_btn_id }}')) {
      // currently fetching; ignore the click
      return;
    }

    // clear the input and any errors
    $('#{{ match_numbers_input_id }}').val('');
    clearInvalid('{{ match_numbers_input_id }}');
    $('#{{ refresh_matches_status_id }}').addClass('d-none').html('');

    const currentMatchNumbers = getCurrentMatchRows({ onlyNumbers: true });
    if (currentMatchNumbers.length === 0) {
      // no matches; do nothing
      return;
    }
    const matchesQuery = currentMatchNumbers.join(',');

    setButtonLoading('{{ refresh_matches_btn_id }}');
    ajaxRequest('GET', '{{ url_for("fetch_matches_info") }}', {
      data: { matches: matchesQuery },
      success: (response, status, jqXHR) => {
        stopButtonLoading('{{ refresh_matches_btn_id }}');
        if (response.success) {
          populateMatchInfoTable(response);
        } else {
          // some failure
          $('#{{ refresh_matches_status_id }}')
            .removeClass('d-none')
            .html(response.reason ?? 'Unknown error: please try again');
        }
      },
      error: (jqXHR, status, errorThrown) => {
        stopButtonLoading('{{ refresh_matches_btn_id }}');
        $('#{{ refresh_matches_status_id }}')
          .removeClass('d-none')
          .html(jqXHR.statusText);
      },
    });
  }

  function toggleMatchTeamMembers(elementId) {
    const $membersDiv = $('#' + elementId);
    const $toggleButton = $('#toggle-' + elementId);
    if ($membersDiv.hasClass('d-none')) {
      // show
      $membersDiv.removeClass('d-none');
      $toggleButton.html('Hide Members');
    } else {
      // hide
      $membersDiv.addClass('d-none');
      $toggleButton.html('Show Members');
    }
  }

  function removeMatchRow(matchNumber) {
    const $matchRow = $('#match-' + matchNumber);
    if ($matchRow.length === 0) return;
    $matchRow.remove();

    // update the matches query
    const currentMatchNumbers = getCurrentMatchRows({ onlyNumbers: true });
    if (currentMatchNumbers.length === 0) {
      // no more matches
      resetMatchesTable();
      return;
    }
    const matchesQuery = currentMatchNumbers.join(',');

    // update the matches query
    ajaxRequest('GET', '{{ url_for("get_matches_query") }}', {
      data: { matches: matchesQuery },
      success: (response, status, jqXHR) => {
        if (response.success) {
          const cleanMatchesQuery = response['matches_query'];
          // update matches query text
          $('#{{ last_matches_query_id }}').html(cleanMatchesQuery);
          // update last query button
          $('#{{ set_last_matches_query_btn_id }}').attr(
            'lastquery',
            cleanMatchesQuery
          );
        }
        // if error, do nothing
      },
      error: (jqXHR, status, errorThrown) => {
        // do nothing
      },
    });
  }

  $(document).ready(() => {
    {% if has_all_admin_settings_error is not none %}
    // There is an error; disable all inputs
    $('input,button').prop('disabled', true);
    {% else %}
    // Fetch roster
    $('#{{ fetch_roster_btn_id }}').click((event) => {
      handleFetchRosterClicked();
    });
    $('#{{ clear_roster_btn_id }}').click((event) => {
      handleClearRosterClicked();
    });
    // clear the flashed text after 60 seconds
    clearElementAfter('{{ fetch_roster_messages_id }}', 60);

    // Fetch match info
    $('#{{ match_numbers_input_id }}').onEnterKeyPress((event) => {
      $('#{{ fetch_matches_btn_id }}').click();
    });
    $('#{{ fetch_matches_btn_id }}').click((event) => {
      handleFetchMatchInfoClicked();
    });
    $('#{{ set_last_matches_query_btn_id }}').click((event) => {
      handleSetLastMatchesQueryClicked();
    });
    $('#{{ refresh_matches_btn_id }}').click((event) => {
      refreshMatches();
    });
    $('#{{ delete_all_matches_btn_id }}').click((event) => {
      resetMatchesTable();
    });
  });
</script>
{% endblock %}
