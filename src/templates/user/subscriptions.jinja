{% extends "user/subscriptions_base.jinja" %}

{% set all_schools_btn_wrapper_id = "all-schools-btn-wrapper" %}
{% set school_page_btn_class = "school-page-btn" %}
{% set school_page_wrapper_class = school_page_btn_class ~ "-wrapper" %}
{% set school_checkboxes_row_class = "school-checkboxes" %}
{% set toggle_school_btn_class = "toggle-school-btn" %}

{% set all_divisions_btn_wrapper_id = "all-divisions-btn-wrapper" %}
{% set division_page_btn_class = "division-page-btn" %}
{% set division_page_wrapper_class = division_page_btn_class ~ "-wrapper" %}
{% set division_checkboxes_column_class = "division-checkboxes" %}
{% set toggle_division_btn_class = "toggle-division-btn" %}

{% block teams %}
{% if subscriptions|length > 1 %}
{# allow filtering by school #}
<div class="row">
  <div class="col">
    {% with school_names = subscriptions.keys() %}
    {{ macros.pagination(
         all_schools_btn_wrapper_id,
         school_page_btn_class,
         school_page_wrapper_class,
         "school",
         school_names,
       )
    }}
    {% endwith %}
  </div>
</div>
{% endif %}
{% if divisions|length > 1 %}
{# allow filtering by division #}
<div class="row">
  <div class="col">
    {{ macros.pagination(
         all_divisions_btn_wrapper_id,
         division_page_btn_class,
         division_page_wrapper_class,
         "division",
         divisions,
       )
    }}
  </div>
</div>
{% endif %}
<div class="table-responsive">
  <table class="table table-borderless w-auto">
    <thead>
      <th></th>
      {% for division in divisions %}
      <th
        class="{{ division_checkboxes_column_class }}"
        scope="col"
        division="{{ division|e }}"
      >
        {{ division|e }}
        <button
          type="button"
          class="btn btn-sm btn-secondary {{ toggle_division_btn_class }} ms-1"
          division="{{ division|e }}"
        >
          Toggle {{ division|e }}
        </button>
      </th>
      {% endfor %}
    </thead>
    <tbody>
      {% for school, school_teams in subscriptions.items() %}
      <tr class="{{ school_checkboxes_row_class }}" school="{{ school|e }}">
        <th scope="row">
          <div>{{ school|e }}</div>
          <div>
            <button
              type="button"
              class="btn btn-sm btn-secondary {{ toggle_school_btn_class }}"
              school="{{ school|e }}"
            >
              Toggle {{ school|e }}
            </button>
          </div>
        </th>
        {% for division in divisions %}
        <td
          class="{{ division_checkboxes_column_class }}"
          division="{{ division|e }}"
        >
          {% set division_teams = school_teams.get(division, {}) %}
          {% for team_number, team_info in division_teams.items() %}
          {% set team_name = team_info["name"] %}
          {% set is_user_on_team = team_info["is_user_on_team"] %}
          {% set checkbox_id =
               team_name|replace(" ", "-") ~ "-subscribe-checkbox"
           %}
          {% call macros.form_checkbox(
               checkbox_id,
               team_name,
               checked=(is_user_on_team or team_info["is_subscribed"]),
             )
           %}
          school="{{ school|e }}"
          division="{{ division|e }}"
          number="{{ team_number|e }}"
          {% if is_user_on_team %}
          onteam="true"
          disabled
          {% endif %}
          {% endcall %}
          {% endfor %}
        </td>
        {% endfor %}
      </tr>
      {% endfor %}
    </tbody>
  </table>
</div>
{% endblock %}

{% block script %}
<script>
  function clearSavingStatus() {
    clearElement('{{ save_subscriptions_status_id }}');
  }

  function updateSavingStatus() {
    const $status = $('#{{ save_subscriptions_status_id }}');
    $status.removeClass('text-danger');
    $status.addClass('fst-italic');
    $status.text('Saving...');
  }

  function setSavingError(errorMessage) {
    const $status = $('#{{ save_subscriptions_status_id }}');
    $status.removeClass('fst-italic');
    $status.addClass('text-danger');
    $status.text(errorMessage);
  }

  function toggleAllCheckboxes({ school, division } = {}) {
    if (school == null && division == null) return;

    clearSavingStatus();

    let attrQuery;
    const requestData = { all: true };
    if (school != null) {
      attrQuery = `[school="${school}"]`;
      requestData.school = school;
    } else {
      attrQuery = `[division="${division}"]`;
      requestData.division = division;
    }

    const $checkboxes = $(`input[type="checkbox"]${attrQuery}`);
    if ($checkboxes.length === 0) return;

    let hasOtherTeams = false;
    let allChecked = true;
    $checkboxes.each((index, element) => {
      const $checkbox = $(element);
      if (getElementAttr($checkbox, 'onteam') !== '') {
        // user is on this team, so ignore it
        return;
      }
      hasOtherTeams = true;
      if (!$checkbox.prop('checked')) {
        allChecked = false;
        return false;
      }
    });
    if (!hasOtherTeams) {
      // toggle button has no effect
      return;
    }
    // toggle all checkboxes
    $checkboxes.each((index, element) => {
      const $checkbox = $(element);
      if (getElementAttr($checkbox, 'onteam') !== '') {
        // user is on this team, so ignore it
        return;
      }
      // if everything is checked, uncheck everything. otherwise, check
      // everything.
      $checkbox.prop('checked', !allChecked);
    });

    // save checked
    updateSavingStatus();
    const method = allChecked ? 'DELETE' : 'POST';
    ajaxRequest(method, '{{ url_for("subscriptions") }}', {
      contentType: 'application/json',
      data: JSON.stringify(requestData),
      success: (response, status, jqXHR) => {
        if (response.success) {
          setElementHtmlFor('{{ save_subscriptions_status_id }}', 'Saved.', 5);
        } else {
          setSavingError(response.reason ?? 'Unknown error: please try again');
        }
      },
      error: (jqXHR, status, errorThrown) => {
        setSavingError(jqXHR.statusText);
      },
    });
  }

  function subscribeToTeam($checkbox) {
    clearSavingStatus();

    // if the user is on this team, don't do anything
    if (getElementAttr($checkbox, 'onteam') !== '') {
      // always make sure it's checked
      $checkbox.prop('checked', true);
      return;
    }

    const school = getElementAttr($checkbox, 'school');
    const division = getElementAttr($checkbox, 'division');
    const teamNumber = getElementAttr($checkbox, 'number');
    if (school === '' || division === '' || teamNumber === '') return;
    const checked = $checkbox.prop('checked');

    updateSavingStatus();
    const method = checked ? 'POST' : 'DELETE';
    ajaxRequest(method, '{{ url_for("subscriptions") }}', {
      contentType: 'application/json',
      data: JSON.stringify({
        school: school,
        division: division,
        number: teamNumber,
      }),
      success: (response, status, jqXHR) => {
        if (response.success) {
          setElementHtmlFor('{{ save_subscriptions_status_id }}', 'Saved.', 5);
        } else {
          setSavingError(response.reason ?? 'Unknown error: please try again');
        }
      },
      error: (jqXHR, status, errorThrown) => {
        setSavingError(jqXHR.statusText);
      },
    });
  }

  $(document).ready(() => {
    // pagination of schools
    handleBsPagination(
      '{{ all_schools_btn_wrapper_id }}',
      '{{ school_page_btn_class }}',
      '{{ school_page_wrapper_class }}',
      'school',
      '{{ school_checkboxes_row_class }}'
    );
    // pagination of divisions
    handleBsPagination(
      '{{ all_divisions_btn_wrapper_id }}',
      '{{ division_page_btn_class }}',
      '{{ division_page_wrapper_class }}',
      'division',
      '{{ division_checkboxes_column_class }}'
    );

    // toggling an entire school
    $('.{{ toggle_school_btn_class }}').click((event) => {
      const school = getElementAttr($(event.target), 'school');
      if (school === '') return;
      toggleAllCheckboxes({ school: school });
    });
    // toggling an entire division
    $('.{{ toggle_division_btn_class }}').click((event) => {
      const division = getElementAttr($(event.target), 'division');
      if (division === '') return;
      toggleAllCheckboxes({ division: division });
    });

    // toggling a team
    $('input[type="checkbox"]').on('input', (event) => {
      subscribeToTeam($(event.target));
    });
  });
</script>
{% endblock %}
