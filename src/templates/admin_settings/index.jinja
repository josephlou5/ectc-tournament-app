{% extends "shared/layout.jinja" %}

{% block title %}
Admin Settings
{% endblock %}

{% set service_account_email_id = "service-account-email" %}
{% set copy_email_btn_id = "copy-service-account-email-btn" %}
{% set copy_email_status_id = "copy-service-account-email-status" %}

{% set service_account_creds_input_id = "service-account-credentials" %}
{% set service_account_messages_id = "service-account-messages" %}
{% set set_service_account_btn_id = "set-service-account-btn" %}
{% set set_service_account_status_id = "set-service-account-status" %}

{% set tms_url_input_id = "tms-url-input" %}
{% set tms_url_messages_id = "tms-url-messages" %}
{% set open_tms_btn_id = "open-tms-btn" %}
{% set save_tms_url_btn_id = "save-tms-url-btn" %}
{% set save_tms_url_status_id = "save-tms-url-status" %}

{% set flashed = get_flashed_by_categories(subcategories=True) %}

{% block body %}
<div id="admin-config-body" class="container-fluid">
  <div class="row mb-2">
    <div class="col">
      <h2>Service Account</h2>
      <div class="mb-2">
        The service account is used to access Google Spreadsheets. Either make
        your spreadsheet publicly accessible or share the spreadsheet with the
        service account email with at least view permissions.
      </div>
      <div class="mb-2">
        Current service account:
        {% if service_account_email is none %}
        <em class="text-muted">None</em>
        {% else %}
        <strong id="{{ service_account_email_id }}">
          {{ service_account_email }}
        </strong>
        <button
          type="button"
          class="btn btn-sm btn-outline-success ms-2"
          id="{{ copy_email_btn_id }}"
        >
          Copy
        </button>
        <span id="{{ copy_email_status_id }}" class="ms-2"></span>
        {% endif %}
      </div>
    </div>
  </div>
  <div class="row mb-2">
    <div class="col-7">
      <h4>Change Service Account</h4>
      <div class="mb-2">
        Please see
        <a
          href="https://docs.gspread.org/en/latest/oauth2.html#for-bots-using-service-account"
          target="_blank"
        >this page</a> for how to create a service account. Upload the
        credentials JSON file here.
      </div>

      <div class="row">
        <div class="col-auto mb-2">
          <div id="service-account-file-input-wrapper">
            <input
              type="file"
              id="{{ service_account_creds_input_id }}"
              class="form-control"
            />
            <div
              id="{{ service_account_creds_input_id }}-invalid"
              class="invalid-feedback"
            ></div>
          </div>
        </div>
        <div class="col-auto">
          <button
            type="button"
            id="{{ set_service_account_btn_id }}"
            class="btn btn-success"
          >
            Set Service Account
          </button>
          <span
            id="{{ set_service_account_status_id }}"
            class="col-auto ms-2 align-self-center"
          ></span>
        </div>
      </div>
      <div class="row mb-2">
        <div id="{{ service_account_messages_id }}" class="col-auto">
          {% for accent, messages in flashed["service-account"].items() %}
          {% for message in messages %}
          {% call macros.bs_alert(accent) %}
          {{ message }}
          {% endcall %}
          {% endfor %}
          {% endfor %}
        </div>
      </div>
    </div>
  </div>

  <div class="row mb-2">
    <div class="col">
      <h2>TMS Spreadsheet</h2>
      <div class="mb-2">
        Please provide the URL of the TMS spreadsheet, which will be used to
        fetch the full roster and the teams for each match.
      </div>
      <div class="mb-2">
        <div class="row mb-2 align-items-center">
          <div class="col-auto pe-0">
            <a
              id="{{ open_tms_btn_id }}"
              class="btn btn-sm btn-outline-success"
              target="_blank"
            >
              Open
            </a>
          </div>
          {# with these breakpoints, the input usually is long enough to contain
             an entire spreadsheet url
           #}
          <div class="col col-lg-8 col-xl-7 col-xxl-6 pe-0">
            <input
              type="text"
              id="{{ tms_url_input_id }}"
              class="form-control"
              value="{{ tms_spreadsheet_url or '' }}"
            />
            <div
              id="{{ tms_url_input_id }}-invalid"
              class="invalid-feedback"
            ></div>
          </div>
          <div class="col-auto">
            <button id="{{ save_tms_url_btn_id }}" class="btn btn-success">
              Save
            </button>
            <span
              id="{{ save_tms_url_status_id }}"
              class="col-auto ms-2 align-self-center"
            ></span>
          </div>
        </div>
        <div class="row mb-2">
          <div id="{{ tms_url_messages_id }}" class="col-auto">
            {% for accent, messages in flashed["tms-spreadsheet"].items() %}
            {% for message in messages %}
            {% call macros.bs_alert(accent) %}
            {{ message }}
            {% endcall %}
            {% endfor %}
            {% endfor %}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block script %}
<script>
  function handleSetServiceAccountClicked() {
    const SETTING = 'Setting...';

    if ($('#{{ set_service_account_status_id }}').html().trim() == SETTING) {
      // currently setting; ignore click
      return;
    }

    // clear messages and status
    $('#{{ service_account_messages_id }}').html('');
    $('#{{ set_service_account_status_id }}').html('');
    clearInvalid('{{ service_account_creds_input_id }}');

    const fileList = $('#{{ service_account_creds_input_id }}').prop('files');
    if (fileList.length === 0) {
      // Error: no file chosen
      setInvalid('{{ service_account_creds_input_id }}', 'Please choose a file.');
      return;
    }

    // read file
    const file = fileList[0];
    file.text().then((fileText) => {
      // set service account with file contents
      $('#{{ set_service_account_status_id }}').html(SETTING);
      ajaxRequest('POST', '{{ url_for("set_service_account") }}', {
        contentType: 'application/json',
        data: fileText,
        success: (response, status, jqXHR) => {
          if (response.success) {
            // reload the page
            location.reload();
          } else {
            // clear status
            $('#{{ set_service_account_status_id }}').html('');
            // some failure
            setInvalid(
              '{{ service_account_creds_input_id }}',
              response.reason ?? 'Unknown error: please try again'
            );
          }
        },
        error: (jqXHR, status, errorThrown) => {
          // clear status
          $('#{{ set_service_account_status_id }}').html('');
          setInvalid('{{ service_account_creds_input_id }}', jqXHR.statusText);
        },
      })
    });
  }

  function getUrl() {
    return getInputValue('{{ tms_url_input_id }}');
  }

  function handleTMSSpreadsheetUrlChanged() {
    const url = getUrl();
    const $openButton = $('#{{ open_tms_btn_id }}');
    if (url === '') {
      $openButton.addClass('disabled');
      $openButton.removeAttr('href');
    } else {
      $openButton.removeClass('disabled');
      $openButton.attr('href', url);
    }
  }

  function handleSaveTMSSpreadsheetClicked() {
    const SAVING = 'Saving...';

    if ($('#{{ save_tms_url_status_id }}').html().trim() === SAVING) {
      // currently saving; ignore click
      return;
    }

    // clear messages and status
    $('#{{ tms_url_messages_id }}').html('');
    $('#{{ save_tms_url_status_id }}').html('');
    clearInvalid('{{ tms_url_input_id }}');

    const url = getUrl();
    if (url === '') {
      // Error: no url given
      setInvalid('{{ tms_url_input_id }}', 'Please enter a URL.');
      return;
    }

    $('#{{ save_tms_url_status_id }}').html(SAVING);
    ajaxRequest('POST', '{{ url_for("set_tms_spreadsheet") }}', {
      contentType: 'application/json',
      data: JSON.stringify({ url }),
      success: (response, status, jqXHR) => {
        if (response.success) {
          // reload the page
          location.reload();
        } else {
          // clear status
          $('#{{ save_tms_url_status_id }}').html('');
          // some failure
          setInvalid(
            '{{ tms_url_input_id }}',
            response.reason ?? 'Unknown error: please try again'
          );
        }
      },
      error: (jqXHR, status, errorThrown) => {
        // clear status
        $('#{{ save_tms_url_status_id }}').html('');
        setInvalid('{{ tms_url_input_id }}', jqXHR.statusText);
      },
    });
  }

  $(document).ready(() => {
    // Service account
    $('#{{ copy_email_btn_id }}').click((event) => {
      // copy the email to the user's clipboard
      copyElementContent('{{ service_account_email_id }}', () => {
        setElementTextFor(
          '{{ copy_email_status_id }}',
          bsAlertSm('Copied!', 'success'),
          30
        );
      });
    });
    $('#{{ set_service_account_btn_id }}').click((event) => {
      handleSetServiceAccountClicked();
    });
    // clear the flashed text after 60 seconds
    clearElementAfter('{{ service_account_messages_id }}', 60);

    // TMS Spreadsheet
    handleTMSSpreadsheetUrlChanged();
    $('#{{ tms_url_input_id }}').on('input', (event) => {
      handleTMSSpreadsheetUrlChanged();
    });
    $('#{{ tms_url_input_id }}').onEnterKeyPress((event) => {
      $('#{{ save_tms_url_btn_id }}').click();
    });
    $('#{{ save_tms_url_btn_id }}').click((event) => {
      handleSaveTMSSpreadsheetClicked();
    });
    // clear the flashed text after 60 seconds
    clearElementAfter('{{ tms_url_messages_id }}', 60);
  });
</script>
{% endblock %}
