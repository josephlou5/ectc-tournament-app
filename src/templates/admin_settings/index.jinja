{% extends "shared/layout.jinja" %}

{% block title %}
Admin Settings
{% endblock %}

{% set super_admin_contact_modal_id = "super-admin-contact-modal" %}

{% macro _contact_super_admin(action) %}
{% if user_is_super_admin %}
Please visit the <a href="{{ url_for('global_settings') }}">Global Settings</a>
page to {{ action }}.
{% else %}
Please contact a
<a
  data-bs-toggle="modal"
  href="#{{ super_admin_contact_modal_id }}"
>Super Admin</a> to {{ action }}.
{% endif %}
{% endmacro %}

{# Service account #}
{% set service_account_email_id = "service-account-email" %}
{% set copy_email_btn_id = "copy-service-account-email-btn" %}
{% set copy_email_status_id = "copy-service-account-email-status" %}

{# TMS spreadsheet #}
{% set tms_url_input_id = "tms-url-input" %}
{% set tms_url_messages_id = "tms-url-messages" %}
{% set open_tms_btn_id = "open-tms-btn" %}
{% set set_tms_url_btn_id = "set-tms-url-btn" %}
{% set clear_tms_url_btn_id = "clear-tms-url-btn" %}

{# Mailchimp #}
{% set mc_audiences_info_section_id = "mc-audiences-info" %}
{% set mc_fetch_audiences_id = "mc-fetch-audiences" %}

{% set mc_audience_tag_input_id = "mc-audience-tag-input" %}
{% set mc_set_audience_tag_btn_id = "mc-set-audience-tag-btn" %}
{% set mc_set_audience_tag_status_id = "mc-set-audience-tag-status" %}

{% set mc_templates_info_section_id = "mc-template-folders-info" %}
{% set mc_fetch_template_folders_id = "mc-fetch-template-folders" %}

{% set flashed = get_flashed_by_categories(subcategories=true) %}

{% block body %}
<div id="admin-settings-body" class="container-fluid">
  {% if not user_is_super_admin %}
  <div
    id="{{ super_admin_contact_modal_id }}"
    class="modal fade"
    tabindex="-1"
    aria-labelledby="{{ super_admin_contact_modal_id }}-title"
    aria-hidden="true"
  >
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5
            id="{{ super_admin_contact_modal_id }}-title" 
            class="modal-title"
          >
            Super Admins
          </h5>
          {{ macros.bs_close_btn(dismiss="modal") }}
        </div>
        <div class="modal-body">
          {% if super_admins|length == 0 %}
          Sorry, there are currently no super admins.
          {% else %}
          You may contact any of these super admins:
          <ul>
            {% for email in super_admins %}
            <li>{{ email|e }}</li>
            {% endfor %}
          </ul>
          {% endif %}
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-success" data-bs-dismiss="modal">
            OK
          </button>
        </div>
      </div>
    </div>
  </div>
  {% endif %}
  <div id="tms-spreadsheet-section" class="row mb-2">
    <div class="col">
      <div class="row">
        <div class="col">
          <h2>TMS Spreadsheet</h2>
        </div>
      </div>
      <div class="row">
        <div class="col">
          <h4>Service Account</h4>
          <div class="mb-2">
            The service account is used to access Google Spreadsheets. Either
            make your spreadsheet publicly accessible or share the spreadsheet
            with the service account email with at least view permissions.
          </div>
          <div class="mb-2">
            Current service account:
            {% if service_account_email is none %}
            <em class="text-muted">None</em>
            {% else %}
            <strong id="{{ service_account_email_id }}">
              {{ service_account_email }}
            </strong>
            <button
              type="button"
              class="btn btn-sm btn-outline-success ms-2"
              id="{{ copy_email_btn_id }}"
            >
              Copy
            </button>
            <span id="{{ copy_email_status_id }}" class="ms-2"></span>
            {% endif %}
          </div>
        </div>
      </div>
      {% if service_account_email is none %}
      <div class="row mb-2">
        <div class="col-auto">
          {% call macros.bs_alert("danger", dismissible=false) %}
          {{ _contact_super_admin("set a service account") }}
          {% endcall %}
        </div>
      </div>
      {% endif %}
      <div class="row">
        <div class="col">
          <h4>Spreadsheet URL</h4>
          <div class="mb-2">
            Please provide the URL of the TMS spreadsheet, which will be used to
            fetch the full roster and the teams for each match.
          </div>
          <div class="mb-2">
            <div class="row mb-2">
              <div class="col-auto pe-0">
                <a
                  id="{{ open_tms_btn_id }}"
                  class="btn btn-sm btn-outline-success mt-1"
                  target="_blank"
                >
                  Open
                </a>
              </div>
              {# with these breakpoints, the input is usually long enough to
                 contain an entire spreadsheet url
               #}
              <div class="col col-lg-8 col-xl-7 col-xxl-6 pe-0">
                <input
                  type="text"
                  id="{{ tms_url_input_id }}"
                  class="form-control"
                  value="{{ tms_spreadsheet_url or '' }}"
                  placeholder="TMS Spreadsheet URL"
                />
                <div
                  id="{{ tms_url_input_id }}-invalid"
                  class="invalid-feedback"
                ></div>
              </div>
              <div class="col-auto pe-0">
                {{ macros.loading_btn(
                     set_tms_url_btn_id, "success", "Set", "Setting..."
                   )
                }}
              </div>
              {% if tms_spreadsheet_url is not none %}
              <div class="col-auto">
                {{ macros.confirm_btn(
                     clear_tms_url_btn_id,
                     "Clear URL",
                     "clear the TMS spreadsheet url",
                     loading_text="Clearing...",
                   )
                }}
              </div>
              {% endif %}
            </div>
            <div class="row mb-2">
              <div id="{{ tms_url_messages_id }}" class="col-auto">
                {% for accent, messages in flashed["tms-spreadsheet"].items() %}
                {% for message in messages %}
                {% call macros.bs_alert(accent) %}
                {{ message }}
                {% endcall %}
                {% endfor %}
                {% endfor %}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div id="mailchimp-section" class="row mb-2">
    <div class="col">
      <div class="row">
        <div class="col">
          <h2>Mailchimp</h2>
        </div>
      </div>
      {% if not has_mc_api_key %}
      <div class="row mb-2">
        <div class="col-auto">
          {% call macros.bs_alert("danger", dismissible=false) %}
          {{ _contact_super_admin("set the Mailchimp API key") }}
          {% endcall %}
        </div>
      </div>
      {% endif %}
      <div class="row mb-2">
        <div class="col">
          <h4>Audience</h4>
          <div class="mb-2">
            Mailchimp's contacts are split into <em>audiences/lists</em>. When
            you create your Mailchimp account, an audience is automatically
            created for you, but if you're an advanced user, here is where you
            can choose which audience the tournament contacts will be imported
            into. Whenever the "Fetch Roster" button is clicked on the
            <a href="{{ url_for('notifications') }}">Notifications</a> page, all
            the new contacts will be added to this audience.
          </div>
          <div class="row mb-2">
            <div id="{{ mc_audiences_info_section_id }}" class="col-auto">
              {% if not has_mc_api_key %}
              {% call macros.bs_alert("danger", dismissible=false) %}
              No Mailchimp API key
              {% endcall %}
              {% else %}
              <div id="{{ mc_fetch_audiences_id }}">
                {# will be replaced when audiences are fetched #}
                <div
                  class="spinner-border spinner-border-sm"
                  role="status"
                ></div>
                Fetching Audiences...
              </div>
              {% endif %}
            </div>
          </div>
          {% if has_mc_api_key %}
          <div class="mb-2">
            For ease of organization, you can have all the fetched contacts from
            the TMS spreadsheet be tagged with this optional label when they are
            imported into Mailchimp.
          </div>
          <div class="row">
            <label
              for="{{ mc_audience_tag_input_id }}"
              class="col-form-label col-auto pe-0"
            >
              Audience Tag
            </label>
            <div class="col-xs col-sm-8 col-md-7 col-lg-4 pe-0 mb-2">
              <input
                type="text"
                id="{{ mc_audience_tag_input_id }}"
                class="form-control"
                value="{{ mc_audience_tag or '' }}"
                placeholder="e.g., 2023 Princeton Tournament"
              />
              <div
                id="{{ mc_audience_tag_input_id }}-invalid"
                class="invalid-feedback"
              ></div>
            </div>
            <div class="col-auto pe-0">
              {{ macros.loading_btn(
                   mc_set_audience_tag_btn_id, "success", "Set", "Setting..."
                 )
              }}
            </div>
            <div
              id="{{ mc_set_audience_tag_status_id }}"
              class="col-form-label col-auto"
            ></div>
          </div>
          {% endif %}
        </div>
      </div>
      <div class="row mb-2">
        <div class="col">
          <h4>Templates</h4>
          <div class="mb-2">
            Mailchimp has the concept of <em>templates</em>, but due to some API
            limitations, we will duplicate campaigns instead. What this means
            for you is that instead of editing templates on the "Email
            Templates" page, you will need to go into a campaign and edit its
            content, and the campaigns that you wish to use as "templates" must
            all be in the campaign folder selected below. When you want to send
            an email, you will be able to select which "campaign template" you
            want to duplicate for the new email.
          </div>
          <div class="row mb-2">
            <div id="{{ mc_templates_info_section_id }}" class="col-auto">
              {% if not has_mc_api_key %}
              {% call macros.bs_alert("danger", dismissible=false) %}
              No Mailchimp API key
              {% endcall %}
              {% else %}
              <div id="{{ mc_fetch_template_folders_id }}">
                {# will be replaced when folders are fetched #}
                <div
                  class="spinner-border spinner-border-sm"
                  role="status"
                ></div>
                Fetching Template Folders...
              </div>
              {% endif %}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block script %}
<script>
  function getUrl() {
    return getInputValue('{{ tms_url_input_id }}');
  }

  function handleTMSSpreadsheetUrlChanged() {
    const url = getUrl();
    const $openButton = $('#{{ open_tms_btn_id }}');
    if (url === '') {
      $openButton.addClass('disabled');
      $openButton.removeAttr('href');
    } else {
      $openButton.removeClass('disabled');
      $openButton.attr('href', url);
    }
  }

  function handleSetTMSSpreadsheetClicked() {
    if (isButtonLoading('{{ set_tms_url_btn_id }}')) {
      // currently setting; ignore click
      return;
    }

    // clear messages
    $('#{{ tms_url_messages_id }}').html('');
    clearInvalid('{{ tms_url_input_id }}');

    const url = getUrl();
    if (url === '') {
      // Error: no url given
      setInvalid('{{ tms_url_input_id }}', 'Please enter a URL.');
      return;
    }

    setButtonLoading('{{ set_tms_url_btn_id }}');
    ajaxRequest('POST', '{{ url_for("set_tms_spreadsheet") }}', {
      contentType: 'application/json',
      data: JSON.stringify({ url }),
      success: (response, status, jqXHR) => {
        if (response.success) {
          // reload the page
          location.reload();
        } else {
          // some failure
          stopButtonLoading('{{ set_tms_url_btn_id }}');
          setInvalid(
            '{{ tms_url_input_id }}',
            response.reason ?? 'Unknown error: please try again'
          );
        }
      },
      error: (jqXHR, status, errorThrown) => {
        stopButtonLoading('{{ set_tms_url_btn_id }}');
        setInvalid('{{ tms_url_input_id }}', jqXHR.statusText);
      },
    });
  }

  function handleClearTMSSpreadsheetClicked() {
    if (isButtonLoading('{{ clear_tms_url_btn_id }}')) {
      // currently clearing; ignore click
      return;
    }

    setButtonLoading('{{ clear_tms_url_btn_id }}');
    // just reload once the clearing is done
    ajaxRequest('DELETE', '{{ url_for("set_tms_spreadsheet") }}');
  }

  function populateMailchimpAudienceDropdown() {
    const $loadingDiv = $('#{{ mc_fetch_audiences_id }}');
    if ($loadingDiv.length === 0) return;

    ajaxRequest('GET', '{{ url_for("get_mailchimp_audiences") }}', {
      success: (response, status, jqXHR) => {
        if (response.success) {
          // populate the audience infos
          $('#{{ mc_audiences_info_section_id }}').html(
            response['audiences_html']
          );
        } else {
          // some failure
          $('#{{ mc_audiences_info_section_id }}').html(
            bsAlert(
              response.reason ?? 'Unknown error: please try again',
              'danger',
              { dismissible: false }
            )
          );
        }
      },
      error: (jqXHR, status, errorThrown) => {
        $('#{{ mc_audiences_info_section_id }}').html(
          bsAlert(jqXHR.statusText, 'danger', { dismissible: false })
        );
      },
    });
  }

  function handleMailchimpAudienceSelected(element) {
    const elementId = element.id;

    clearInvalid(elementId);

    const selectedAudienceId = getInputValue(elementId);
    if (selectedAudienceId === '') {
      return;
    }

    // show the proper row
    $('.mc-audience').addClass('d-none');
    $('.mc-audience-' + selectedAudienceId).removeClass('d-none');

    // send ajax request to save audience id
    ajaxRequest('POST', '{{ url_for("set_mailchimp_audience") }}', {
      contentType: 'application/json',
      data: JSON.stringify({ audienceId: selectedAudienceId }),
      success: (response, status, jqXHR) => {
        if (response.success) {
          // good! do nothing
        } else {
          // some failure
          setInvalid(
            elementId,
            response.reason ?? 'Unknown error: please try again'
          );
        }
      },
      error: (jqXHR, status, errorThrown) => {
        setInvalid(
          elementId,
          `Error while saving selection: ${jqXHR.statusText}`
        );
      },
    });
  }

  function handleMailchimpSetAudienceTagClicked() {
    if (isButtonLoading('{{ mc_set_audience_tag_btn_id }}')) {
      // currently setting; ignore click
      return;
    }

    // clear status
    $('#{{ mc_set_audience_tag_status_id }}').html('');
    clearInvalid('{{ mc_audience_tag_input_id }}');

    // can be empty, which would clear it
    const audienceTag = getInputValue('{{ mc_audience_tag_input_id }}');

    setButtonLoading('{{ mc_set_audience_tag_btn_id }}');
    ajaxRequest('POST', '{{ url_for("set_mailchimp_audience_tag") }}', {
      contentType: 'application/json',
      data: JSON.stringify({ 'tag': audienceTag }),
      success: (response, status, jqXHR) => {
        stopButtonLoading('{{ mc_set_audience_tag_btn_id }}');
        if (response.success) {
          // success
          setElementTextFor('{{ mc_set_audience_tag_status_id }}', 'Success');
        } else {
          // some failure
          setInvalid(
            '{{ mc_audience_tag_input_id }}',
            response.reason ?? 'Unknown error: please try again'
          );
        }
      },
      error: (jqXHR, status, errorThrown) => {
        stopButtonLoading('{{ mc_set_audience_tag_btn_id }}');
        setInvalid('{{ mc_audience_tag_input_id }}', jqXHR.statusText);
      },
    });
  }

  function populateMailchimpTemplateFolderDropdown() {
    const $loadingDiv = $('#{{ mc_fetch_template_folders_id }}');
    if ($loadingDiv.length === 0) return;

    ajaxRequest('GET', '{{ url_for("get_mailchimp_template_folders") }}', {
      success: (response, status, jqXHR) => {
        if (response.success) {
          // populate the template folder infos
          $('#{{ mc_templates_info_section_id }}').html(
            response['folders_html']
          );
        } else {
          // some failure
          $('#{{ mc_templates_info_section_id }}').html(
            bsAlert(
              response.reason ?? 'Unknown error: please try again',
              'danger',
              { dismissible: false }
            )
          );
        }
      },
      error: (jqXHR, status, errorThrown) => {
        $('#{{ mc_templates_info_section_id }}').html(
          bsAlert(jqXHR.statusText, 'danger', { dismissible: false })
        );
      },
    });
  }

  function handleMailchimpFolderSelected(element) {
    const elementId = element.id;

    clearInvalid(elementId);

    const selectedFolderId = getInputValue(elementId);
    if (selectedFolderId === '') {
      return;
    }

    // send ajax request to save folder id
    ajaxRequest('POST', '{{ url_for("set_mailchimp_template_folder") }}', {
      contentType: 'application/json',
      data: JSON.stringify({ folderId: selectedFolderId }),
      success: (response, status, jqXHR) => {
        if (response.success) {
          // good! do nothing
        } else {
          // some failure
          setInvalid(
            elementId,
            response.reason ?? 'Unknown error: please try again'
          );
        }
      },
      error: (jqXHR, status, errorThrown) => {
        setInvalid(
          elementId,
          `Error while saving selection: ${jqXHR.statusText}`
        );
      },
    });
  }

  $(document).ready(() => {
    // Service account
    $('#{{ copy_email_btn_id }}').click((event) => {
      // copy the email to the user's clipboard
      copyElementContent('{{ service_account_email_id }}', () => {
        setElementTextFor(
          '{{ copy_email_status_id }}',
          bsAlertSm('Copied!', 'success'),
          30
        );
      });
    });

    // TMS Spreadsheet
    handleTMSSpreadsheetUrlChanged();
    $('#{{ tms_url_input_id }}').on('input', (event) => {
      handleTMSSpreadsheetUrlChanged();
    });
    $('#{{ tms_url_input_id }}').onEnterKeyPress((event) => {
      $('#{{ set_tms_url_btn_id }}').click();
    });
    $('#{{ set_tms_url_btn_id }}').click((event) => {
      handleSetTMSSpreadsheetClicked();
    });
    $('#{{ clear_tms_url_btn_id }}').click((event) => {
      handleClearTMSSpreadsheetClicked();
    });
    // clear the flashed text after 60 seconds
    clearElementAfter('{{ tms_url_messages_id }}', 60);

    // Mailchimp
    // Audience
    populateMailchimpAudienceDropdown();
    // Audience tag
    $('#{{ mc_audience_tag_input_id }}').onEnterKeyPress((event) => {
      $('#{{ mc_set_audience_tag_btn_id }}').click();
    });
    $('#{{ mc_set_audience_tag_btn_id }}').click((event) => {
      handleMailchimpSetAudienceTagClicked();
    });
    // Template folder
    populateMailchimpTemplateFolderDropdown();
  });
</script>
{% endblock %}
